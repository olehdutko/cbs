/*
 * File: app/view/ui/narahuvania_view.js
 * Date: Mon Sep 05 2011 19:04:54 GMT+0300 (FLE Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.0.
 * http://www.sencha.com/products/designer/
 *
 * This file will be auto-generated each and everytime you export.
 *
 * Do NOT hand edit this file.
 */
var GridName = "narahuvannia_view_grid";
var win;
var perenesty_v;
 Ext.Loader.setConfig({enabled: true});
Ext.Loader.setPath('Ext.ux', '/ext-4.0.2a/examples/ux');
Ext.require([
    'Ext.grid.*',
    'Ext.data.*',
    'Ext.ux.grid.FiltersFeature',
    'Ext.toolbar.Paging'
]);
 
 Ext.define('Product', {
    extend: 'Ext.data.Model',
    fields: [ 
		//{type: 'string', name: 'Type'}, 
		{type: 'numeric', name: 'ID'}, 
		{type: 'numeric', name: 'Nomer_Narahuvannia'}, 
		{type: 'date', name: 'Date'}, 
		{type: 'string', name: 'Pryznachennia'}, 
		{type: 'numeric', name: 'Suma'}, 
		{type: 'string', name: 'Prymitky'}
		]
});

var url = {
        local:  'grid-filter.json',  
        remote: 'grid-filter.php'
    };

    var encode = false;
    var local = false;
	
	
    var filters = {
        ftype: 'filters',
        encode: encode, 
        local: local,   

        filters: [
        //{type: 'string', dataIndex: 'Type'}, 
		{type: 'numeric', dataIndex: 'ID'}, 
		{type: 'numeric', dataIndex: 'Nomer_Narahuvannia'}, 
		{type: 'date', dataIndex: 'Date'}, 
		{type: 'string', dataIndex: 'Pryznachennia'}, 
		{type: 'numeric', dataIndex: 'Suma'}, 
		{type: 'string', dataIndex: 'Prymitky'}
        ]
    };
	
		var dialog;
		dialog = Ext.create( 'Ext.Window', {
		title: 'Період',
		//layout:'fit',
		width:300,
		height:200,
		closeAction:'hide',
		plain: true,
		items: [
		
		{
			xtype: 'datefield',
			format : "d/m/Y",
			fieldLabel:'Початок періоду',
			name:'date1',
			anchor:'100%',
			emptyText:'Початок періоду',
			id: 'date1'
		},
		{
			xtype: 'datefield',
			format : "d/m/Y",
			fieldLabel:'Кінець періоду',
			name:'date2',
			anchor:'100%',
			emptyText:'Кінець періоду',
			id: 'date2'
		}
		],
 				buttons: [				
			
			{text: 'Продовжити',
			handler: function(){
			var strdate1 = new Date();
			var strdate2 = new Date();
			strdate1 = Ext.getCmp("date1").getValue();
			strdate2 = Ext.getCmp("date2").getValue();
			

var day = strdate1.getDate().toString();
var month = (strdate1.getMonth()+1).toString();
var year = strdate1.getFullYear().toString();

var day1 = strdate2.getDate().toString();
var month1 = (strdate2.getMonth()+1).toString();
var year1 = strdate2.getFullYear().toString();



			d1 = year+'-'+month+'-'+day;
			d2 = year1+'-'+month1+'-'+day1;
			strUrl = "/php/Narahuvannia_export.php"
		
			
			strUrlNew = strUrl+"?&date1="+d1+"&date2="+d2;
			window.open(strUrlNew);
			dialog.hide();
			}
			}
			]
		});
	

										
	var editor = new Ext.grid.plugin.CellEditing({
        saveText: 'Зберегти'
		
    });
	
	PerenestyDo_Store = Ext.create('Ext.data.JsonStore', {
        autoLoad: true,
            storeId: 'PerenestyDo_Store',
            proxy: {
                type: 'ajax',
                url: './Json/PerenestyDo.json',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
                {
                    name: 'type'
                }
            ]
    });
	

  NarahovanoNaStore = Ext.create('Ext.data.JsonStore', {
        storeId: 'NarahovanoNaStore',
		autoLoad: true,
            proxy: {
                type: 'ajax',
				url: './php/NarahovanoNa.php',
                reader: {
                    type: 'json',
                    root: 'results'
                }
            },
            fields: [
                {
                    name: 'suma'
                },
				{
                    name: 'zalyzhok'
                }
            ],
			listeners: {
				load: function() {
					Ext.getCmp("NarahovanoNa").setValue(NarahovanoNaStore.data.items[0].data.suma + ' грн.');
					Ext.getCmp("NeVyplacheno").setValue(NarahovanoNaStore.data.items[1].data.zalyzhok + ' грн.');
				}
			}
    });
 OpenNarahuvannia_Store1 = Ext.create('Ext.data.JsonStore', {
        pageSize: 20,
		autoLoad: true,
            storeId: 'OpenNarahuvannia_Store1',
            //remoteSort: true,
            proxy: {
                type: 'ajax',
                url: './php/view_Narahuvannia_open.php',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
                /*{
                    name: 'Type'
                },*/
                {
                    type: 'int',
					name: 'ID'
                },
                {
                    //type: 'date',
					name: 'Date'
                },
                {
                    name: 'Pryznachennia'
                },
                {
                    name: 'IsKontrAgent'
                },
                {
                    type: 'float',
					name: 'Zalyshok'
                },
                {
                    type: 'float',
					name: 'Suma'
                },
				{
                    name: 'Valiuta'
                },
                {
                    name: 'Prymitky'
                },
				
				
				//Недавно додано
				{
                    type: 'int',
					name: 'count'
                },
				{
                    name: 'oblad_Type'
                },
				{
                    name: 'Category'
                },
				{
                    name: 'SubCategory'
                },
				{
                    name: 'Model'
                },
				{
                    name: 'ModelId'
                },
				{
                    name: 'Description'
                },
				{
                    name: 'OdVym'
                },
				{
                    name: 'Vendor'
                },
				{
                    type: 'float',
					name: 'Price'
                }
				//Недавно додано
            ]
    });
 ClosedNarahuvannia_Store1 = Ext.create('Ext.data.JsonStore', {
        pageSize: 20,
		autoLoad: true,
            storeId: 'ClosedNarahuvannia_Store1',
            //remoteSort: true,
            proxy: {
                type: 'ajax',
                url: './php/view_Narahuvannia_close.php',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
                /*{
                    name: 'Type'
                },*/
                {
                    type: 'int',
					name: 'ID'
                },
                {
                    //type: 'date',
					name: 'Date'
                },
                {
                    name: 'Pryznachennia'
                },
                {
                    name: 'IsKontrAgent'
                },
                {
                    type: 'float',
					name: 'Zalyshok'
                },
                {
                    type: 'float',
					name: 'Suma'
                },
				{
                    name: 'Valiuta'
                },
                {
                    name: 'Prymitky'
                },
				
				//Недавно додано
				{
                    type: 'int',
					name: 'count'
                },
				{
                    name: 'oblad_Type'
                },
				{
                    name: 'Category'
                },
				{
                    name: 'SubCategory'
                },
				{
                    name: 'Model'
                },
				{
                    name: 'ModelId'
                },
				{
                    name: 'Description'
                },
				{
                    name: 'OdVym'
                },
				{
                    name: 'Vendor'
                },
				{
                    type: 'float',
					name: 'Price'
                }
				//Недавно додано
            ]
    });
	
CurrentStore = "OpenNarahuvannia_Store1";	


	Ext.define('Borsuko.view.ui.narahuvania_view', {
    extend: 'Ext.panel.Panel',

    height: 750,
    frameHeader: false,

    initComponent: function() {
        var me = this;
        me.items = [
            {
				xtype: 'gridpanel',
				height: 750,
				id: GridName,
                toFrontOnShow: false,
                bodyBorder: true,
                animCollapse: false,
                collapseFirst: false,
                frameHeader: false,
                title: 'Нарахування',
                //forceFit: true,
				store: CurrentStore,
				plugins: [editor],
				columnLines: true,
                        columns: [
						{
                        xtype: 'gridcolumn',
                        width: 15,
                        dataIndex: 'ID',
                        text: 'Номер',
						renderer: BlueColor
                    },
					{
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'Date',
                        text: 'Дата нарахування',
						renderer: dateFunction
                    },
                    {
                        xtype: 'gridcolumn',
                       width: 15,
                        dataIndex: 'Pryznachennia',
                        text: 'Призначення нарахування',
						renderer: BlueColor
                    },
					{
						xtype: 'gridcolumn',
						width: 15,
						dataIndex: 'Model',
						text: 'Модель',
						renderer: BlueColor
					},
					 {
						xtype: 'gridcolumn',
						width: 15,
						dataIndex: 'OdVym',
						text: 'Од. Вим',
						renderer: BlueColor
					},
					{
						xtype: 'gridcolumn',
						width: 15,
						dataIndex: 'Description',
						text: 'Опис',
						renderer: BlueColor
					},
					{
						xtype: 'gridcolumn',
						width: 15,
						dataIndex: 'Price',
						text: 'Ціна',
						renderer: BlueColor
					},
					{
						xtype: 'gridcolumn',
						width: 15,
						dataIndex: 'Valiuta',
						text: 'Валюта',
						renderer: valiuta
					},							
					{
						xtype: 'gridcolumn',
						width: 15,
						dataIndex: 'count',
						text: 'Кількість',
						renderer: BlueColor
					},
					{
                        xtype: 'numbercolumn',
						width: 15,
                        dataIndex: 'Suma',
                        groupable: true,
                        text: 'Сума',
						/*summaryType: "sum", 
								summaryRenderer: function(value, summaryData, dataIndex) {
									return value.toFixed(2);
									},*/
						renderer: BlueColor
                    },
                    {
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'Oper_Suma',
						text: 'Опер. сума',
						field: {
							xtype: 'textfield'
						}
                        
						//renderer: BlueColor
                    },		
					{
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'Zalyshok',
                        text: 'Невиплачено',
						/*summaryType: "sum", 
								summaryRenderer: function(value, summaryData, dataIndex) {
									return value.toFixed(2);
									},*/
						renderer: BlueColor
                    },
                    
                    {
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'Prymitky',
                        text: 'Примітка',
						renderer: BlueColor
                    },		
							
					{
						xtype: 'gridcolumn',
						width: 15,
						hidden: true,
						dataIndex: 'ModelId',
						text: 'ModelId',
						renderer: BlueColor
                    },
                    /*{
                        xtype: 'gridcolumn',
                        width: 40,
                        dataIndex: 'Type',
                        groupable: true,
                        text: 'Тип',
						renderer: BlueColor
                    },
                    {
                        xtype: 'gridcolumn',
                        autoRender: true,
                        hidden: true,
                        width: 40,
                        layout: {
                            type: 'fit'
                        },
                        dataIndex: 'TypeID',
                        text: 'TypeID',
						renderer: BlueColor
                    },*/
                    {
                        xtype: 'gridcolumn',
                        hidden: true,
                        width: 15,
                        dataIndex: 'CategoryId',
                        text: 'КІ',
						renderer: BlueColor
                    },
                    
                    {
                        xtype: 'gridcolumn',
						width: 15,
                        hidden: true,
                        dataIndex: 'SubCategoryId',
                        text: 'СКІ',
						renderer: BlueColor
                    },
                    
					//Недавно додано
							
							
							{
                                xtype: 'gridcolumn',
                                width: 15,
                                dataIndex: 'oblad_Type',
                                text: 'Тип обладнання',
								renderer: BlueColor
                            },
							
                           
                            {
                                xtype: 'gridcolumn',
								width: 15,
                                dataIndex: 'Vendor',
                                text: 'Виробник',
								renderer: BlueColor
                            },
							
							//Недавно додано
                    {
                        xtype: 'gridcolumn',
						width: 15,
                        hidden: true,
                        dataIndex: 'IsKontrAgent',
                        text: 'IsKontrAgent',
						renderer: BlueColor
                    }
					
                    
                ],
                       features: [filters, 
                    {
                        ftype: 'summary'
                    },
                    {
                        ftype: 'grouping'
                    }
                ],
                viewConfig: {
                    height: 700,
                    width: 2000
                },
                selModel: Ext.create('Ext.selection.CheckboxModel', {
                    allowDeselect: true,
                    checkOnly: true
                }),

						dockedItems: [
					
                            {
                                xtype: 'toolbar',
                                dock: 'bottom',
                                items: [
                                    {
                                xtype: 'pagingtoolbar',
								pageSize: 20,
                                width: 415,
                                afterPageText: 'із {0}',
                                beforePageText: 'Сторінка',
                                displayInfo: true,
                                displayMsg: 'Показано {0} - {1} із {2}',
                                emptyMsg: 'Записи відсутні',
                                firstText: 'Перша сторінка',
                                lastText: 'Остання сторінка',
                                nextText: 'Наступна сторінка',
                                prependButtons: true,
                                prevText: 'Попередня сторінка',
                                refreshText: 'Оновити',
                                        store: CurrentStore
                                    },
                                    {
                                        xtype: 'textfield',
										id: 'NarahovanoNa',
										labelWidth: 150,
										fieldLabel: 'Всього нараховано на: '
                                    },
									{
                                        xtype: 'textfield',
										id: 'NeVyplacheno',
										labelWidth: 150,
										fieldLabel: 'Не виплачено: '
                                    }
									
									
									
                                ]
                            },
							{
							xtype: 'toolbar',
							dock: 'top',
							items: [
							{
								xtype: 'button',
								iconCls: 'save_columns', tooltip: 'Зберегти параметри колонок',
								handler : function(){
								getCount();
								}
							},
                            {
                                xtype: 'combobox',
                                id: 'stan',
                                width: 168,
                                emptyText: 'Стан нарахування',
                                displayField: 'type',
                                queryMode: 'local',
                                store: 'StanNarahuvannia',
                                valueField: 'type',
								editable: false,
								listeners: {
								select: {
									fn:function(combo, value) 
									{
									switch (combo.value)
									{
									
								case 'Невиплачені':
								CurrentStore = OpenNarahuvannia_Store1;
									Ext.getCmp(GridName).view.store = CurrentStore;
									Ext.getCmp(GridName).view.refresh();
									//Ext.getCmp("pagingtoolbar").bind(CurrentStore);
									//Ext.getCmp("pagingtoolbar").doRefresh();
									break;
								case 'Виплачені':
								CurrentStore = ClosedNarahuvannia_Store1;
									Ext.getCmp(GridName).view.store = CurrentStore;
									Ext.getCmp(GridName).view.refresh();
									//Ext.getCmp("pagingtoolbar").bind(CurrentStore);
									//Ext.getCmp("pagingtoolbar").doRefresh();
									break;
									};
									}
								}
							}
                            },
                            {
                                xtype: 'button',
                                id: 'add_Narahuvannia',
                                text: 'Нове нарахування',
								iconCls: 'narah_add',
								handler : function()
									{
									//var strID = Ext.getCmp('ID').getValue();
									strUrl = "./narahuvania.php";
									window.location = strUrl;
									}
                            },
                            {
                                xtype: 'button',
                                id: 'vyplatyty',
                                text: 'Виплатити',
								iconCls: 'money-up',
								handler : function()
								{
									Vyplata();
								}
                            },
                            {
                                xtype: 'button',
                                id: 'export',
								iconCls: 'export',
                                text: 'Експорт нарахувань',
								handler : function()
								{
								dialog.show();
								}
								
                            },
							{
								xtype: 'button',
								id: 'add_sklad_fondy',
								text: 'Перенести на склад/в.фонди',
								iconCls: 'add',
								handler: PerenestyDoDialog
								
							}
                           
                        ]
                    }
                        ]
				
						
            }
					
        ],
							
        me.callParent(arguments);
		
		
 ColumnSizeStore = Ext.create('Ext.data.JsonStore', {
	autoLoad: true,
	autoSync: true,
	storeId: 'ColumnSizeStore',
	proxy: {
		type: 'ajax',
		url: './php/SelectColumnSize.php?GridName='+GridName,
		reader: {
			type: 'json',
			root: 'data'
		}
	},
	fields: [
		{
			name: 'size'
		}
	],
	listeners: {
				load: function() {
					var StoreLength = ColumnSizeStore.data.length;
					for(var i = 0; i < StoreLength; i++){
					//ColumnSizes[i] = ColumnSizeStore.data.items[i].data.size;
					Ext.getCmp(GridName).columns[i].setWidth(ColumnSizeStore.data.items[i].data.size);
					};
				}
			}
});	



ColumnStateStore = Ext.create('Ext.data.JsonStore', {

	autoLoad: true,
	autoSync: true,
	storeId: 'ColumnStateStore',
	proxy: {
		type: 'ajax',
		url: './php/SelectColumnState.php?GridName='+GridName,
		reader: {
			type: 'json',
			root: 'data'
		}
	},
	fields: [
		{
			name: 'hidden'
		}
	],
	listeners: {
				load: function() {
					var StoreLength1 = ColumnStateStore.data.length;
					for(var i = 0; i < StoreLength1; i++){
					//ColumnSizes[i] = ColumnStateStore.data.items[i].data.hidden;
					Ext.getCmp(GridName).columns[i].setVisible(!(ColumnStateStore.data.items[i].data.hidden));//працює на FF, але не на IE
					};
				}
			}
});

    }
});

function Vyplata(){		
		
			var selection = Ext.getCmp(GridName).getSelectionModel().selected;
			var Slenght = Ext.getCmp(GridName).getSelectionModel().selected.length;
	
		if(Slenght > 0) {
			for (var i=0 ; i<Slenght; i++) {
			
			var id=selection.items[i].data.ID;
			var strDescription=selection.items[i].data.Description;
			var date=selection.items[i].data.Date;
			var pryznachennia=selection.items[i].data.Pryznachennia;
			var opersuma=selection.items[i].data.Oper_Suma;
			var suma=selection.items[i].data.Suma;
			var prymitky=selection.items[i].data.Prymitky;
			var zalyshok=selection.items[i].data.Zalyshok;
			var IsKontrAgent=selection.items[i].data.IsKontrAgent;
			
			var new_zalyshok= zalyshok - opersuma ;
			
			if( new_zalyshok >= 0) {
			alert('Добре, залишок : '+new_zalyshok);
			if( new_zalyshok == 0) 
				{var additional_comment = ". Проведена повна виплата за нарахуванням № "+id+". Нарахування закрито. "}
			else
				{var additional_comment = ". Проведена часткова виплата за нарахуванням № "+id+". Залишилося виплати "+new_zalyshok+" грн."}

	
			Ext.Ajax.request({
				url: './php/new_vyplata.php',
				params: {
				id:id,
				date:date,
				pryznachennia:pryznachennia,
				opersuma:opersuma,
				suma:suma,
				prymitky:prymitky,
				additional_comment:additional_comment,
				zalyshok:zalyshok,
				new_zalyshok:new_zalyshok
				},
				success: function()
					{
						var MyGrid = Ext.getCmp(GridName).getView();
						MyGrid.getStore().load();
					},
				failure: function(response)
					{
					Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
					}
			});
				//kontragent:pryznachennia,
				//opersuma:opersuma,
				if( IsKontrAgent == 1) 
				//Пишу на таблицю KontragentHistory
				var strType = "Виплата";
				var strPrymitkaTMP = "Виплата контрагенту '"+ pryznachennia+"' '" +opersuma+ "' гривень";
			
				Ext.Ajax.request(
				{
					url: './php/na_kontragentHistory.php',
					params: {
						description: strDescription,
						p_Kontragent: pryznachennia,
						price: opersuma,
						prymitka: strPrymitkaTMP,
						type:strType
					},
					success: function()
					{
						var MyGrid = Ext.getCmp(GridName).getView();
						MyGrid.getStore().load();
					},
					failure: function(response)
					{
						Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
					}
				})
				
				{
					Ext.Ajax.request({
					url: './php/z_balansu_kontragenta.php',
					params: {
					p_Kontragent:pryznachennia,
					suma:opersuma
					},
					success: function()
						{
						var MyGrid = Ext.getCmp(GridName).getView();
						MyGrid.getStore().load();
						},
					failure: function(response)
						{
						Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
						}
				});
				}
			}
			else
			{
				if ( isNaN(new_zalyshok) ) 
				{
					alert('Не введена сума для виплати!');
				}
				else
				{
					alert('Ви намагаєтесь виплатити більшу суму ніж нараховано. Різниця : '+new_zalyshok);
				}
			}
		}
	}
	}
	
	function dateFunction(val){ 
		//var ItemDate = Ext.DateTime.format(val, 'd/m/Y');
		//return ItemDate	;
		//2011-07-02 12:28:44
		//console.log(val)
		var dateArray = val.split("-");
		//new Date(dateArray[2], dateArray[1], dateArray[0]);
		var dateArray2 = dateArray[2].split(" ");
		dateArray[2] = dateArray2[0] 
		//console.log(dateArray[2]+"/"+dateArray[1]+"/"+dateArray[0]+" "+dateArray2[1])
		MyDate = dateArray[2]+"/"+dateArray[1]+"/"+dateArray[0]+" "+dateArray2[1];
		return MyDate;
	}

	


	function PerenestyDo(){		
			var target;
			switch (perenesty_v)
			{
		case 'В.фонди': 
			target = 'fondy';
			break;
		case 'Склад': 
			target = 'sklad';
			break;	
			}
	
		
			var selection = Ext.getCmp(GridName).getSelectionModel().selected;
			var Slenght = Ext.getCmp(GridName).getSelectionModel().selected.length;
	
		if(Slenght > 0) {
			for (var i=0 ; i<Slenght; i++) {
			var additional_comment = 'Додано із нарахування: ';
			var oblad_Type=selection.items[i].data.oblad_Type;
			var Model=selection.items[i].data.Model;
			var Description=selection.items[i].data.Description;
			var Vendor=selection.items[i].data.Vendor;
			var Price=selection.items[i].data.Price;
			var count=selection.items[i].data.count;
			var OdVym=selection.items[i].data.OdVym;
			var Valiuta=selection.items[i].data.Valiuta;
			var id=selection.items[i].data.ID;
			
		if(selection.items[i].data.ModelId = '0') {
			Ext.Ajax.request({
				url: './php/PerenestyNaSklad_fondy.php',
				params: {
				additional_comment: additional_comment,
				oblad_Type:oblad_Type,
				Model:Model,
				Description:Description,
				Vendor:Vendor,
				Price:Price,
				Valiuta:Valiuta,
				count:count,
				id:id,
				OdVym:OdVym,
				target:target
				},
				success: function()
					{
						var MyGrid = Ext.getCmp(GridName).getView();
						MyGrid.getStore().load();
					},
				failure: function(response)
					{
					Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
					}
			});
		}
		else
		{
			alert('Це Нарахування вже було перенесено!!!');
			alert(selection.items[i].data.ModelId+' = '+0);
		}		
			}
			
		}
		else
		{
				alert('Виберіть товар для переносу!');

		}
	}
	
	
	 function PerenestyDoDialog() {
        if (!win) {
            var form = Ext.widget('form', {
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                border: false,
				frame: true,
                bodyPadding: 10,

                fieldDefaults: {
                    labelAlign: 'top',
                    labelWidth: 100,
                    labelStyle: 'font-weight:bold'
                },
                defaults: {
                    margins: '0 0 10 0'
                },

                items: [{
							xtype: 'combobox',
							editable: false,
							id: 'Perenesty_v',
							width: 168,
							emptyText: 'Перенести до',
							displayField: 'type',
							queryMode: 'local',
							store: 'PerenestyDo_Store',
							valueField: 'type'
							
						}],

                buttons: [{
                    text: 'Перенести',
                    handler: function() {
                        if (this.up('form').getForm().isValid()) {
						perenesty_v = Ext.getCmp('Perenesty_v').getValue();	
						PerenestyDo();
						this.up('form').getForm().reset();
                        this.up('window').hide();
                        }
                    }
                },
				{
                    text: 'Відмінити',
                    handler: function() {
                        this.up('form').getForm().reset();
                        this.up('window').hide();
                    }
                }
				]
            });

            win = Ext.widget('window', {
                title: 'Перенести до:',
                closeAction: 'hide',
                width: 400,
                height: 200,
                minHeight: 200,
                layout: 'fit',
                resizable: true,
                modal: true,
                items: form
            });
        }
        win.show();
		
		

    }
	
	function valiuta(val){
		switch(val)
		{
		case 'dollar':
		  var ItemValiuta = '<span style="color:green;"> долари </span>';
		  break;
		case 'grivna':
		  var ItemValiuta = '<span style="color:blue;"> гривні </span>';
		  break;
		case 'euro':
		  var ItemValiuta = '<span style="color:orange;"> євро </span>';
		  break;
		default:
		  var ItemValiuta = '<span style="color:red;"> Невизначено</span>';
		}
	return ItemValiuta;
	}	
	
	function BlueColor (v, params, record) 	{ 
	if(record.data.ModelId != 0) { 
	var color = 'blue'; 
	};
	
	return '<span style="color:' + color + '">' + v + '</span>';
}

	
	function getCount(){
	var jsonObj = { };
	  var MyGrid = Ext.getCmp(GridName).getView();
	  var ColumnSizeArray=new Array(); 
	  var ColumnVisibleArray=new Array(); 
	  var columns = MyGrid.getGridColumns();
	  var columnsLength = MyGrid.getGridColumns().length;
	  var columnsState = MyGrid.getHeaderCt().getGridColumns();
	  for(var i = 0; i < columnsLength; i++){
			ColumnSizeArray[i]=MyGrid.getHeaderAtIndex(i).el.dom.firstChild.scrollWidth;
			jsonObj[ColumnSizeArray[i].id] = ColumnSizeArray[i].value;
			ColumnVisibleArray[i]=columnsState[i].hidden;
	  }	

		var JsonColumnSize = array1dToJson(ColumnSizeArray, 'data', 'size');
		var JsonColumnVisible = array1dToJson(ColumnVisibleArray, 'data', 'hidden');
  
		Ext.Ajax.request(
				{
					url: './php/SaveColumnSize.php',
					params: {
						GridName: GridName,
						JsonColumnSize: JsonColumnSize,
						JsonColumnVisible: JsonColumnVisible
						
					},
					success: function()
					{
					Ext.MessageBox.alert('Виконано', 'Стан колонок успішно збережений');
					},
					failure: function(response)
					{
						Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
					}
				})
		
		/*function array2dToJson(a, p, nl) {
		  var i, j, s = '{"' + p + '":[';
		  nl = nl || '';
		  for (i = 0; i < a.length; ++i) {
			s += nl + array1dToJson(a[i]);
			if (i < a.length - 1) {
			  s += ',';
			}
		  }
		  s += nl + ']}';
		  return s;
		}*/
		
		function array1dToJson(a, p, value) {
		  var i, s = '[';
		  for (i = 0; i < a.length; ++i) {
			if (typeof a[i] == 'string') {
			  s += '"' + a[i] + '"';
			}
			else { // assume number type
			  s += "{\""+value+"\": "+a[i]+"}";
			}
			if (i < a.length - 1) {
			  s += ',';
			}
		  }
		  s += ']';
		  if (p) {
			return '{"' + p + '":' + s + '}';
		  }
		  return s;
		}
}

