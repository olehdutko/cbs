/*
 * File: app/view/ui/Nariad_spys.js
 * Date: Mon Sep 05 2011 19:04:54 GMT+0300 (FLE Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.0.
 * http://www.sencha.com/products/designer/
 *
 * This file will be auto-generated each and everytime you export.
 *
 * Do NOT hand edit this file.
 */
 var GridName = "Nariad_Spys_Grid";
	/*function valiuta(val){ 
		switch(val)
		{
		case 'dollar':
		  var ItemValiuta = '<span style="color:green;">' + val + '</span>';
		  break;
		case 'grivna':
		  var ItemValiuta = '<span style="color:blue;">' + val + '</span>';
		  break;
		case 'euro':
		  var ItemValiuta = '<span style="color:orange;">' + val + '</span>';
		  break;
		default:
		  var ItemValiuta = '<span style="color:red;"> Невизначено</span>';
		}
	return ItemValiuta;
	}*/
	
	function valiuta(val){ 
		switch(val)
		{
		case 'dollar':
		  var ItemValiuta = '<span style="color:green;"> долари </span>';
		  break;
		case 'grivna':
		  var ItemValiuta = '<span style="color:blue;"> гривні </span>';
		  break;
		case 'euro':
		  var ItemValiuta = '<span style="color:orange;"> євро </span>';
		  break;
		default:
		  var ItemValiuta = '<span style="color:red;"> Невизначено</span>';
		}
	return ItemValiuta;
	}	
	
		
	
	function pctChange(val, params, record){ 
		switch(record.data.Valiuta)
		{
		case 'dollar':
		  var strgrivna = '<span style="color:green;">' + ((record.data.count * record.data.Price) * record.data.dollar).toFixed(2) + ' грн.</span>';
		  break;
		case 'grivna':
		  var strgrivna = '<span style="color:blue;">' + ((record.data.count * record.data.Price) * record.data.grivna).toFixed(2) + ' грн.</span>';
		  break;
		case 'euro':
		  var strgrivna = '<span style="color:orange;">' + ((record.data.count * record.data.Price) * record.data.euro).toFixed(2) + ' грн.</span>';
		  break;
		default:
		  var strgrivna = '<span style="color:red;">' + (record.data.count * record.data.Price).toFixed(2) +'</span>';
		}
		
		return '<span style="color:blue;">' + strgrivna + '</span>';
	}	

var hash = getUrlVars();
var fm = Ext.form;
 function getUrlVars()
{
var vars = [], hash;
var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
for(var i = 0; i < hashes.length; i++)
{
hash = hashes[i].split('=');
vars.push(hash[0]);
vars[hash[0]] = hash[1];
}
return vars;
}
strObjid = hash['objid'];


	 
DataForNariad1 = Ext.create('Ext.data.JsonStore', {
        storeId: 'DataForNariad1',
		autoLoad: true,
            proxy: {
                type: 'ajax',
                url: './php/nariad_total.php?action=showData&objid='+strObjid,
                reader: {
                    type: 'json',
                    root: 'results'
                }
            },
            fields: [
                {
                    name: 'Type'
                },
                {
                    type: 'int',
					name: 'NariadID'
                },
                {
                    name: 'P_kontragent'
                },
                {
                    name: 'ModelId'
                },
                {
                    name: 'Model'
                },
                {
                    name: 'Description'
                },
				 {
                    name: 'Prymitka'
                },
                {
                    name: 'Vendor'
                },
                {
                    name: 'count'
                },
                {
                    name: 'Kilkist'
                },
                {
                    name: 'OdVym'
                },
                {
                    name: 'Price'
                },
                {
                    name: 'Valiuta'
                },
                {
                    name: 'Suma'
                },
                {
                    //type: 'date',
					name: 'Date'
                },
                {
                    name: 'euro'
                },
                {
                    name: 'dollar'
                },
                {
                    name: 'grivna'
                }
            ]
    }); 
	 
	 
Ext.form.Field.prototype.msgTarget = 'side';


 var grivna = Ext.create('Ext.form.TextField', {
	allowBlank : true,
	//padding: 10,
    labelAlign: 'right',
	fieldLabel:'Курс гривні',
	//maxLength: 100,
	width: 150,
	 labelWidth: 70,
	name:'grivna',
	//anchor:'90%',
	id:"grivna"
}); 
var dollar = Ext.create('Ext.form.TextField', {
	allowBlank : true,
	//padding: 10,
    labelAlign: 'right',
	fieldLabel:'Курс долару',
	//maxLength: 100,
	width: 150,
	 labelWidth: 70,
	name:'nazva',
	//anchor:'90%',
	id:"dollar"
}); 
var euro = Ext.create('Ext.form.TextField', {
	allowBlank : true,
	//padding: 10,
    labelAlign: 'right',
	fieldLabel:'Курс євро',
	//maxLength: 50,
	width: 150,
	 labelWidth: 70,
	name:'dollar',
	
	id:"euro"
}); 

var reader2 = new Ext.data.JsonReader({
        //idProperty: 'ModelId',
		root: 'results',
        totalProperty: 'total',
        fields: [
			{name: 'euro', type: 'float'},
			{name: 'grivna', type: 'float'},
			{name: 'dollar', type: 'float'},
			{name: 'pdv', type: 'float'},
        ]
    });

	var SettingsForm =  Ext.create('Ext.FormPanel', {
		id: "SettingsForm",
		layout: 'table',
		
		frame: true,
		border: false,
		reader: reader2,
		width: 600,
		//title:'Поточний курс валют',
		//hidden:false,
		draggable:false,
		resizible:false,
		collapsible: false,
		collapsed: false,
		maximizable : false,
		animCollapse: false,
		items:[dollar, euro, grivna]
			
    });
	
Ext.define('Borsuko.view.ui.Nariad_spys', {
    extend: 'Ext.panel.Panel',

    height: 660,
    animCollapse: false,
    collapseFirst: false,
    title: 'Закриття наряду: Списання',

    initComponent: function() {
        var me = this;
        me.items = [
            {
                xtype: 'gridpanel',
                frame: true,
                height: 600,
                id: GridName,
                focusOnToFront: false,
                animCollapse: false,
                collapseFirst: false,
                //forceFit: true,
                store: 'DataForNariad1',
                columnLines: true,
				listeners: {
						render: function() {
						
						//alert(qqq);
						}
					},
					
					
                columns: [
                    {
                        xtype: 'gridcolumn',
                        autoRender: true,
                        width: 15,
                        layout: {
                            type: 'fit'
                        },
                        dataIndex: 'Type',
                        text: 'Тип'
                    },
                    {
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'NariadID',
                        text: 'Номер Наряду'
                    },
                    {
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'P_kontragent',
                        text: 'Головний Контрагент'
                    },
                    {
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'Model',
                        text: 'Модель'
                    },
                    {
                        xtype: 'gridcolumn',
                        width: 15,
                        dataIndex: 'ModelId',
                        text: 'МІ'
                    },
                    {
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'Description',
                        text: 'Опис'
                    },
                    {
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'Vendor',
                        text: 'Виробник'
                    },
                    {
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'opercount',
                        text: 'Опер. К-сть',
						field: {
                            xtype: 'textfield'
                        }
						//editor: new fm.TextField()
                        
                    },
                    {
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'count',
                        text: 'Неспис. К-сть',
                        field: {
                            xtype: 'textfield'
                        }
                    },
                    {
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'Kilkist',
                        text: 'Заг. К-сть',
                        field: {
                            xtype: 'textfield'
                        }
                    },
                    {
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'OdVym',
                        text: 'Од. вим.'
                    },
                    {
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'Price',
                        text: 'Ціна за 1 в валюті',
                        field: {
                            xtype: 'textfield'
                        }
                    },
                    {
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'Valiuta',
						renderer: valiuta,
                        text: 'Валюта'
                    },
                    {
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'Suma',
						renderer: pctChange,
                        text: 'Сума'
                    },
                    {
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'Date',
						renderer: dateFunction,
                        text: 'Дата'
                    },
					 {
                        xtype: 'gridcolumn',
						width: 15,
                        dataIndex: 'Prymitka',
                        text: 'Примітка'
                    }
                ],
                viewConfig: {
                    frame: true,
                    height: 600,
                    width: 2000
                },
                dockedItems: [
                    {
                        xtype: 'pagingtoolbar',
                        afterPageText: 'із {0}',
                        beforePageText: 'Сторінка',
                        displayInfo: true,
                        displayMsg: 'Показано {0} - {1} із {2}',
                        emptyMsg: 'Записи відсутні',
                        firstText: 'Перша сторінка',
                        lastText: 'Остання сторінка',
                        nextText: 'Наступна сторінка',
                        prependButtons: true,
                        prevText: 'Попередня сторінка',
                        refreshText: 'Оновити',
                        store: 'DataForNariad',
                        dock: 'bottom'
                    }
                ],
                selModel: Ext.create('Ext.selection.CheckboxModel', {

                }),
                plugins: [
                    Ext.create('Ext.grid.plugin.CellEditing', {

                    })
                ]
            }
        ];
        me.dockedItems = [
            {
                xtype: 'toolbar',
                dock: 'top',
                items: [
					{
                        xtype: 'button',
                        iconCls: 'save_columns', tooltip: 'Зберегти параметри колонок',
						handler : function(){
						getCount()
							}
                    },
                    {
                        xtype: 'button',
						id: 'na_sklad',
                        text: 'Повернути на склад/фонди',
						iconCls: 'add',
						handler : function()
						{
						spysaty_na_sklad();
						}
                    },
                    {
                        xtype: 'button',
                        text: 'Списати на контрагента',
						iconCls: 'kontragents',
						id: 'na_kontragenta',
						handler : function(){
						spysaty_na_kontragenta();
						}
                    },
                    {
                        xtype: 'button',
						id: 'na_limitnu_kartku',
						iconCls: 'Price_add',
                        text: 'Списати на лімітну картку',
						handler : function(){
						spysaty_na_limitnu_kartu();
						}
                    },
					SettingsForm
                    
					
					
                ]
            }
        ];
        me.callParent(arguments);
    }
});

store_money = Ext.create('Ext.data.JsonStore', {

        storeId: 'store_money',
		autoLoad: true,
            proxy: {
                type: 'ajax',
				url:'/php/settings.php?action=showData', 
                reader: {
                    type: 'json',
                    root: 'results'
                }
            },
            fields: [
                {
                    name: 'dollar'
                },
                {
                    name: 'euro'
                },
                {
                    name: 'grivna'
                }
            ],
			listeners: {
						load: function() {
						
						Ext.getCmp("dollar").setValue(store_money.data.items[0].data.dollar);
						Ext.getCmp("euro").setValue(store_money.data.items[0].data.euro);
						Ext.getCmp("grivna").setValue(store_money.data.items[0].data.grivna);
						}
					}
    });
function spysaty_na_kontragenta(){
		var selection = Ext.getCmp(GridName).getSelectionModel().selected;
		var Slenght = Ext.getCmp(GridName).getSelectionModel().selected.length;
		
	if(Slenght > 0) {
		for (var i=0 ; i<Slenght; i++) {
			var opercount=selection.items[i].data.opercount;
			var count=selection.items[i].data.count;
			var price=selection.items[i].data.Price;
			var type=selection.items[i].data.Type; 
			var nariadID=selection.items[i].data.NariadID;
			var p_Kontragent=selection.items[i].data.P_kontragent; 
			var ModelId =selection.items[i].data.ModelId; 
			var model=selection.items[i].data.Model; 
			var description=selection.items[i].data.Description; 
			var vendor=selection.items[i].data.Vendor;
			var odVym=selection.items[i].data.OdVym;
			var Valiuta=selection.items[i].data.Valiuta;
			var zalyshok = count - opercount;
			
			var  strFondyType = "в.фонди";
			var strSkladType = "Склад";
			
			if( zalyshok >= 0) {
			alert('Добре, залишок : '+zalyshok);
			
			
		var dollarvalue = Ext.getCmp('dollar').getValue();
		var grivnavalue = Ext.getCmp('grivna').getValue();
		var eurovalue = Ext.getCmp('euro').getValue();
			
		switch(Valiuta)
		{
		case 'dollar':
		  var cina_spysanogo = (opercount * price * dollarvalue).toFixed(2);
		  CyrValiuta = 'доллари';
		  break;
		case 'grivna':
		  var cina_spysanogo = (opercount * price * grivnavalue).toFixed(2);
		  CyrValiuta = 'гривні';
		  break;
		case 'euro':
		  var cina_spysanogo = (opercount * price * eurovalue).toFixed(2);
		  CyrValiuta = 'євро';
		  break;
		default:
		  var cina_spysanogo = (opercount * price).toFixed(2);
		}

//TODO: Необхідно створити таблицю KontrAgent_history і писати туда все що переписується на баланс контрагенту
var prymitka = "На баланс контрагента `"+p_Kontragent+"` списано товар `"+model+"` у кількості `"+opercount+"` "+odVym+" за ціною `"+price+"` "+CyrValiuta+" за 1 "+odVym+" Всього на "+cina_spysanogo+" гривень.";
alert(prymitka);

			
//Списується з таблиці "Dodano_v_Nariad".  zalyshok записується в count
			Ext.Ajax.request({
				url:'./php/insert_nariad.php?action=UpdateZalyshok', 
				params: {
					zalyshok: zalyshok,
					ModelId: ModelId,
					nariadID: nariadID
				},
				success: function()
					{
					//selection.deselectAll();	
					},
				failure: function(response)
					{
					Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
					}
			});		

//Списується з таблиці "robochyj_balans" контрагента (к-сть_товару * Ціна_товару) 
//Списується з таблиці "Sklad_balans" контрагента (к-сть_товару * Ціна_товару) 
//Списується з таблиці "fondy_balans" контрагента (к-сть_товару * Ціна_товару) 
			Ext.Ajax.request({
				url: './php/spysaty_z_kontragenta.php',
				params: {
					p_Kontragent: p_Kontragent,
					cina_spysanogo: cina_spysanogo,
					strSkladType: strSkladType,
					strFondyType: strFondyType,
					type:type
				},
				success: function()
					{
					//selection.deselectAll();	
					},
				failure: function(response)
					{
					Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
					}
			});

//Ціна за к-сть товару з таблиці "Dodano_v_Nariad" переписується на баланс контрагента - Kontragenty.Balans 
  				
				Ext.Ajax.request({
					url: './php/na_balans_kontragenta.php',
					params: {
						p_Kontragent: p_Kontragent,
						cina_spysanogo: cina_spysanogo
					},
					success: function()
						{
						//selection.deselectAll();	
						},
					failure: function(response)
						{
						Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
						}
				});				
			}	
			else
			{
			alert('Ви намагаєтесь списати більше одиниць обладнання ніж доступно. Залишок : '+zalyshok);
			}
		}	
	}	
	var MyGrid = Ext.getCmp(GridName).getView();
	MyGrid.getStore().load();
	NariadClose();
    }	
	
	/*function dateFunction(val){ 
		var ItemDate = Ext.Date.format(val, 'd/m/Y');
		return ItemDate	;
	}*/

	function dateFunction(val){ 
	var dateArray = val.split("-");
	MyDate = dateArray[2]+"/"+dateArray[1]+"/"+dateArray[0];
	return MyDate;
	}
	
	function spysaty_na_sklad(){
		var selection = Ext.getCmp(GridName).getSelectionModel().selected;
		var Slenght = Ext.getCmp(GridName).getSelectionModel().selected.length;
	if(Slenght > 0) {
		for (var i=0 ; i<Slenght; i++) {
			var opercount=selection.items[i].data.opercount;
			var count=selection.items[i].data.count;
			var price=selection.items[i].data.Price;
			var type=selection.items[i].data.Type; 
			var nariadID=selection.items[i].data.NariadID;
			var p_Kontragent=selection.items[i].data.P_kontragent; 
			var ModelId =selection.items[i].data.ModelId; 
			var model=selection.items[i].data.Model; 
			var description=selection.items[i].data.Description; 
			var vendor=selection.items[i].data.Vendor;
			var odVym=selection.items[i].data.OdVym;
			var Valiuta=selection.items[i].data.Valiuta;
			var Prymitka=selection.items[i].data.Prymitka;
			var zalyshok = count - opercount;
			
			var strFondyType = "в.фонди";
			var strSkladType = "Склад";
			
			if( zalyshok >= 0) {
			alert('Добре, залишок : '+zalyshok);
			
			var dollarvalue = Ext.getCmp('dollar').getValue();
			var grivnavalue = Ext.getCmp('grivna').getValue();
			var eurovalue = Ext.getCmp('euro').getValue();
				
			switch(Valiuta)
			{
			case 'dollar':
			  var cina_spysanogo = opercount * price * dollarvalue;
			  break;
			case 'grivna':
			  var cina_spysanogo = opercount * price * grivnavalue;
			  break;
			case 'euro':
			  var cina_spysanogo = opercount * price * eurovalue;
			  break;
			default:
			  var cina_spysanogo = opercount * price;
			}
			
			
			
//ДОБАВИТИ ПЕРЕВІРКУ СКЛАД/ФОНДИ
//Списуєьтся товар на склад з наряду. з таблиці "Dodano_v_Nariad"  
		switch (type)
			{
			case 'в.фонди':
				Ext.Ajax.request({
					url: './php/return_to_fondy.php',
					params: {
					Vendor: vendor,
					Count: opercount,
					Valiuta: Valiuta,
					ModelId: ModelId,
					Model: model,
					Description: description,
					OdVymir: odVym,
					Prymitka: Prymitka,
					
					price: price
					},
					success: function()
						{
						//selection.deselectAll();	
						},
					failure: function(response)
						{
						Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
						}
				});
				break;
			case 'Склад': 
				Ext.Ajax.request({
					url: './php/InsertToSkladFromNariad.php',
					params: {
					//ThemeId:strThemeId,
					//CategoryName:strCategoryName,
					Vendor: vendor,
					valiuta:Valiuta,
					Count: opercount,
					ModelId: ModelId,
					Model: model,
					Description: description,
					Prymitka: Prymitka,
					OdVymir: odVym,
					Price: price
					},
					success: function()
						{
						//selection.deselectAll();	
						},
					failure: function(response)
						{
						Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
						}
				});
				break;
			}

/*
//Списуєьтся товар на склад з наряду. з таблиці "Dodano_v_Nariad"  
			Ext.Ajax.request({
				url: './php/insert_to_sklad.php',
				params: {
				//ThemeId:strThemeId,
				//CategoryName:strCategoryName,
				Vendor: vendor,
				Count: opercount,
				ModelId: ModelId,
				Model: model,
				Description: description,
				OdVymir: odVym,
				price: price
				},
				success: function()
					{
					//selection.deselectAll();	
					},
				failure: function(response)
					{
					Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
					}
			});		
*/			


//Списується з таблиці "robochyj_balans" контрагента (к-сть_товару * Ціна_товару) 
			Ext.Ajax.request({
				url: './php/spysaty_z_kontragenta.php',
				params: {
					p_Kontragent: p_Kontragent,
					cina_spysanogo: cina_spysanogo,
					strSkladType: strSkladType,
					strFondyType: strFondyType,
					type:type
				},
				success: function()
					{
					//selection.deselectAll();	
					},
				failure: function(response)
					{
					Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
					}
			});
			
//Списується к-сть товару з таблиці "Dodano_v_Nariad"  				
			Ext.Ajax.request({
				url: './php/spysaty_z_nariadu.php',
				params: {
					ModelId: ModelId,
					nariadID:nariadID,
					zalyshok: zalyshok
				},
				success: function()
					{
						var MyGrid = Ext.getCmp(GridName).getView();
						MyGrid.getStore().load();

					//selection.deselectAll();	
					},
				failure: function(response)
					{
					Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
					}
			});			
			}	
			else
			{
			alert('Ви намагаєтесь списати забагато одиниць обладнання. Залишок : '+zalyshok);
			}
		}	
	}	
	NariadClose();
    }  
function spysaty_na_limitnu_kartu(){
	var selection = Ext.getCmp(GridName).getSelectionModel().selected;
	var Slenght = Ext.getCmp(GridName).getSelectionModel().selected.length;
		
	if(Slenght > 0) {
		
		for (var i=0 ; i<Slenght; i++) {
			var opercount=selection.items[i].data.opercount;
			var count=selection.items[i].data.count;
			var price=selection.items[i].data.Price;
			var type=selection.items[i].data.Type; 
			var nariadID=selection.items[i].data.NariadID;
			var p_Kontragent=selection.items[i].data.P_kontragent; 
			var ModelId =selection.items[i].data.ModelId; 
			var model=selection.items[i].data.Model; 
			var description=selection.items[i].data.Description; 
			var vendor=selection.items[i].data.Vendor;
			var Valiuta=selection.items[i].data.Valiuta;
			var odVym=selection.items[i].data.OdVym;
			var zalyshok = count - opercount;
			
			if( zalyshok >= 0) {
			alert('Добре, залишок : '+zalyshok);
			
		var dollarvalue = Ext.getCmp('dollar').getValue();
		var grivnavalue = Ext.getCmp('grivna').getValue();
		var eurovalue = Ext.getCmp('euro').getValue();
			
		switch(Valiuta)
		{
		case 'dollar':
		  var cina_spysanogo = opercount * price * dollarvalue;
		  break;
		case 'grivna':
		  var cina_spysanogo = opercount * price * grivnavalue;
		  break;
		case 'euro':
		  var cina_spysanogo = opercount * price * eurovalue;
		  break;
		default:
		  var cina_spysanogo = opercount * price;
		}
			
//TODO: Необхідно створити таблицю KontrAgent_history і писати туда все що переписується на баланс контрагенту
//var prymitka = "На баланс контрагента `"+p_Kontragent+"` списано товар `"+model+"` у кількості `"+opercount+"` "+odVym+" за ціною `"+price+"` грн. за 1 "+odVym+" Всього на "+cina_spysanogo+" гривень.";
//alert(prymitka);
			
//Списується з таблиці "Dodano_v_Nariad".  zalyshok записується в count
			Ext.Ajax.request({
				url:'./php/insert_nariad.php?action=UpdateZalyshok', 
				params: {
					zalyshok: zalyshok,
					ModelId: ModelId,
					nariadID: nariadID
				},
				success: function()
					{
					//sm.clearSelections();	
					},
				failure: function(response)
					{
					Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
					}
			});		

//Списується з таблиці "robochyj_balans" контрагента (к-сть_товару * Ціна_товару) 
			Ext.Ajax.request({
				url: './php/spysaty_z_kontragenta.php',
				params: {
					p_Kontragent: p_Kontragent,
					cina_spysanogo: cina_spysanogo
				},
				success: function()
					{
					//sm.clearSelections();	
					},
				failure: function(response)
					{
					Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
					}
			});

//Ціна за к-сть товару з таблиці "Dodano_v_Nariad" переписується на баланс контрагента - Kontragenty.Balans 
//Якщо в таблиці limit_card такий запис вже є, то вартість додається

				Ext.Ajax.request({
					url: './php/na_limitnu_kartku.php',
					params: {
						//DATE//NO
						ModelId: ModelId, 
						model: model,
						description:description,
						price:price,
						opercount:opercount,
						nariadID: nariadID,
						//тре селектнути обджект по номеру наряду (Object)
						cina_spysanogo: cina_spysanogo,  //Suma
						odVym: odVym
						//Prymitka//NO
					},
					success: function()
						{
							var MyStore = Ext.getCmp(GridName).getStore();
							MyStore.load();
						},
					failure: function(response)
						{
						Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
						}
				});	
					
			}	
			else
			{
			alert('Ви намагаєтесь списати більше одиниць обладнання ніж доступно. Залишок : '+zalyshok);
			}
		}	
	}	
	NariadClose();

    }	

function NariadClose(){
		Ext.Ajax.request({
			url: './php/NariadClose.php',
			params: {strObjid: strObjid},
			success: function()
				{
				//selection.deselectAll();	
				},
			failure: function(response)
				{
				Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
				}
		});				
	}

	
	function getCount(){
	var jsonObj = { };
	  var MyGrid = Ext.getCmp(GridName).getView();
	  var ColumnSizeArray=new Array(); 
	  var ColumnVisibleArray=new Array(); 
	  var columns = MyGrid.getGridColumns();
	  var columnsLength = MyGrid.getGridColumns().length;
	  var columnsState = MyGrid.getHeaderCt().getGridColumns();
	  for(var i = 0; i < columnsLength; i++){
			ColumnSizeArray[i]=MyGrid.getHeaderAtIndex(i).el.dom.firstChild.scrollWidth;
			jsonObj[ColumnSizeArray[i].id] = ColumnSizeArray[i].value;
			ColumnVisibleArray[i]=columnsState[i].hidden;
	  }	

		var JsonColumnSize = array1dToJson(ColumnSizeArray, 'data', 'size');
		var JsonColumnVisible = array1dToJson(ColumnVisibleArray, 'data', 'hidden');
  
		Ext.Ajax.request(
				{
					url: './php/SaveColumnSize.php',
					params: {
						GridName: GridName,
						JsonColumnSize: JsonColumnSize,
						JsonColumnVisible: JsonColumnVisible
						
					},
					success: function()
					{
					Ext.MessageBox.alert('Виконано', 'Стан колонок успішно збережений');
					},
					failure: function(response)
					{
						Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
					}
				})
		
		/*function array2dToJson(a, p, nl) {
		  var i, j, s = '{"' + p + '":[';
		  nl = nl || '';
		  for (i = 0; i < a.length; ++i) {
			s += nl + array1dToJson(a[i]);
			if (i < a.length - 1) {
			  s += ',';
			}
		  }
		  s += nl + ']}';
		  return s;
		}*/
		
		function array1dToJson(a, p, value) {
		  var i, s = '[';
		  for (i = 0; i < a.length; ++i) {
			if (typeof a[i] == 'string') {
			  s += '"' + a[i] + '"';
			}
			else { // assume number type
			  s += "{\""+value+"\": "+a[i]+"}";
			}
			if (i < a.length - 1) {
			  s += ',';
			}
		  }
		  s += ']';
		  if (p) {
			return '{"' + p + '":' + s + '}';
		  }
		  return s;
		}
}

 ColumnSizeStore = Ext.create('Ext.data.JsonStore', {
	autoLoad: true,
	autoSync: true,
	storeId: 'ColumnSizeStore',
	proxy: {
		type: 'ajax',
		url: './php/SelectColumnSize.php?GridName='+GridName,
		reader: {
			type: 'json',
			root: 'data'
		}
	},
	fields: [
		{
			name: 'size'
		}
	],
	listeners: {
				load: function() {
					
					var StoreLength = ColumnSizeStore.data.length;
					for(var i = 0; i < StoreLength; i++){
					//ColumnSizes[i] = ColumnSizeStore.data.items[i].data.size;
					Ext.getCmp(GridName).columns[i].setWidth(ColumnSizeStore.data.items[i].data.size);
					};
				}
			}
});	

ColumnStateStore = Ext.create('Ext.data.JsonStore', {

	autoLoad: true,
	autoSync: true,
	storeId: 'ColumnStateStore',
	proxy: {
		type: 'ajax',
		url: './php/SelectColumnState.php?GridName='+GridName,
		reader: {
			type: 'json',
			root: 'data'
		}
	},
	fields: [
		{
			name: 'hidden'
		}
	],
	listeners: {
				load: function() {
					var StoreLength1 = ColumnStateStore.data.length;
					for(var i = 0; i < StoreLength1; i++){
					//ColumnSizes[i] = ColumnStateStore.data.items[i].data.hidden;
					Ext.getCmp(GridName).columns[i].setVisible(!(ColumnStateStore.data.items[i].data.hidden));//працює на FF, але не на IE
					};
				}
			}
});

	
	
	
	
	
	
	
	
	
	
	