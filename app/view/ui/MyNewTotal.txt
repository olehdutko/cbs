/*
 * File: app/view/ui/totals.js
 * Date: Fri Sep 16 2011 15:55:45 GMT+0300 (FLE Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.0.
 * http://www.sencha.com/products/designer/
 *
 * This file will be auto-generated each and everytime you export.
 *
 * Do NOT hand edit this file.
 */

     var editor = new Ext.grid.plugin.CellEditing({
        saveText: 'Зберегти'
    });
	
	var fm = Ext.form;
	
var MyRecord;
var hash = getUrlVars();
var strGrivna = 1; 
	//var strProp = 1;
	//var strDohid = 1
	var strTotalCost = 1;
	var strProp1 = 0;
	var strTotalCost1 = 0;
	//var strDollar = 0;
	var strGrivna = 1;
	//var streuro = 0;
	var strTotalTime1 = 0;
 function getUrlVars()
{
var vars = [], hash;
var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
for(var i = 0; i < hashes.length; i++)
{
hash = hashes[i].split('=');
vars.push(hash[0]);
vars[hash[0]] = hash[1];
}
return vars;
}
strObjid = hash['objid'];


var getSelectedSumFn = function(v, record, field){
 

            result += record.data.Price;

        return result;
}

 TotalObjectStore1 = Ext.create('Ext.data.JsonStore', {
        storeId: 'TotalObjectStore1',
		autoLoad: true,
		groupField: 'zamovleniaID',
            proxy: {
                type: 'ajax',
                url: '/php/total.php?action=showData&objid='+strObjid,
                reader: {
                    type: 'json',
                    root: 'results'
                }
            },
            fields: [
                 {
                    name: 'nomer'
                }, 
				{
                    name: 'date'
                },
				{
                    name: 'nazva'
                },
                {
                    name: 'zamovleniaID'
                },
                {
                    name: 'type'
                },
                {
                    name: 'CategoryName'
                },
                {
                    name: 'SubCategoryName'
                },
                {
                    name: 'ModelId'
                },
                {
                    name: 'Model'
                },
                {
                    name: 'Count',
					type: 'int'
                },
                {
                    name: 'OdVymir'
                },
                {
                    name: 'Vendor'
                },
                {
                    name: 'Description'
                },
                {
					type: 'int',
                    name: 'Time'
                },
                {
					type: 'int',
                    name: 'TotalTime'
                },
                {	
					type: 'float',
                    name: 'Price'
                },
                {
					type: 'float',
                    name: 'PriceGrn'
                },
                {
					type: 'float',				
                    name: 'cost'
                },
                {
                    name: 'Nacinka'
                },
                {
                    name: 'PriceFor1'
                },
                {
					type: 'float',				
                    name: 'Propozycija'
                },
				{
					type: 'float',				
                    name: 'propozycija'
                },
				{
					type: 'float',				
                    name: 'suma'
                },
				{
					type: 'float',				
                    name: 'dohid'
                },
				
                {
					type: 'float',				
                    name: 'Dohid'
                },
                {
                    name: 'Valiuta'
                },
                {
                    name: 'Gryvni'
                },
                {
                    name: 'dollar'
                },
                {
                    name: 'euro'
                },
                {
                    name: 'Moment_Dollar'
                },
                {
                    name: 'Moment_Euro'
                }
            ],
			listeners: {
						load: function() {
						
						Ext.getCmp("nomer").setValue(TotalObjectStore1.data.items[0].data.nomer);
						Ext.getCmp("date").setValue(TotalObjectStore1.data.items[0].data.date);
						Ext.getCmp("nazva").setValue(TotalObjectStore1.data.items[0].data.nazva);
						
						Ext.getCmp("Propozycija").setValue(TotalObjectStore1.data.items[0].data.propozycija);
						Ext.getCmp("Suma").setValue(TotalObjectStore1.data.items[0].data.suma);
						Ext.getCmp("Dohid").setValue(TotalObjectStore1.data.items[0].data.dohid);
						}
					}
    });
	
	
	//function pctChange(val){ return '<span style="color:blue;">' + val + '%</span>';}
	function pctChange(val){ return '<span>' + val + '%</span>';}
	function green(val){ return '<span style="color:green;">' + val + '</span>';}	
/*
	Ext.ux.grid.GroupSummary.Calculations['Propozycija'] = function(v, record, field){
		record = Ext.getCmp('grid_1').getStore().getAt(0);
		
		var pPrice = record.data.Price;
		var pCount = record.data.Count;
		var pDollar = record.data.Moment_Dollar;
		var pEuro = record.data.Moment_Euro;
		var pNacinka = record.data.Nacinka;
		var pPriceCount = pPrice * pCount;
		
		if (record.data.Valiuta	 == 'dollar') { strProp = v + (pCount * ((((pPrice * pDollar)*pNacinka)/100)+(pPrice * pDollar)).toFixed(2)) };
		if(record.data.Valiuta	 == 'grivna') { strProp = v + (pCount * ((((record.data.Price* strGrivna)*record.data.Nacinka)/100)+(record.data.Price* strGrivna)).toFixed(2)) };
		if(record.data.Valiuta	 == 'euro') { strProp = v + (pCount * ((((pPrice * pEuro)*pNacinka)/100)+(pPrice * pEuro)).toFixed(2)) };
		return "record";
    };
	Ext.ux.grid.GroupSummary.Calculations['Dohid'] = function(v, record, field){
	alert(v);

		var pPrice = record.data.Price;
		var pCount = record.data.Count;
		var pDollar = record.data.Moment_Dollar;
		var pEuro = record.data.Moment_Euro;
		var pNacinka = record.data.Nacinka;
		var pPriceCount = pPrice * pCount;
		
		if (record.data.Valiuta	 == 'dollar') { var strDohid = v + ((pCount * ((((pPrice * pDollar)*pNacinka)/100)+(pPrice * pDollar)).toFixed(2)) - (pCount * pPrice) * pDollar) };
		if (record.data.Valiuta	 == 'grivna') { var strDohid = v + ((pCount * ((((record.data.Price* strGrivna)*record.data.Nacinka)/100)+(record.data.Price* strGrivna)).toFixed(2)) - (pCount * pPrice) * strGrivna ) };
		if (record.data.Valiuta	 == 'euro') { var strDohid = v + ((pCount * ((((pPrice * pEuro)*pNacinka)/100)+(pPrice * pEuro)).toFixed(2)) - (pCount * pPrice) * pEuro) };
		return v;
    };
	Ext.ux.grid.GroupSummary.Calculations['PriceGrn'] = function(v, record, field){
		if (record.data.Valiuta	 == 'dollar') { var strPriceGrn = v + (record.data.Price) * record.data.Moment_Dollar };
		if(record.data.Valiuta	 == 'grivna') { var strPriceGrn = v + (record.data.Price) * strGrivna };
		if(record.data.Valiuta	 == 'euro') { var strPriceGrn = v + (record.data.Price) * record.data.Moment_Euro }; 		
		return strPriceGrn;
    };
	Ext.ux.grid.GroupSummary.Calculations['totalCost'] = function(value, record, field){
		record = Ext.getCmp('grid_1').getStore().getAt(0);
		//alert(record.data);
		if (record.data.Valiuta	 == 'dollar') { value = value + ((record.data.Price * record.data.Count) *record.data.Moment_Dollar) };
		if(record.data.Valiuta	 == 'grivna') { value = value + ((record.data.Price * record.data.Count))*strGrivna };
		if(record.data.Valiuta	 == 'euro') { value = value + ((record.data.Price * record.data.Count))*record.data.Moment_Euro }; 		
		return "record.data";
		//return value;
    };
	Ext.ux.grid.GroupSummary.Calculations['TotalTime'] = function(v, record, field){
 		var strTotalTime1 = 0;
		var strTotalTime = 0;
		strTotalTime =  record.data.Count * record.data.Time;
		strTotalTime1  = strTotalTime1 + strTotalTime;
		return strTotalTime1;
		};
	*/
	

 StoreForPie = Ext.create('Ext.data.JsonStore', {
        storeId: 'StoreForPie',
		autoLoad: true,
            proxy: {
                type: 'ajax',
                url: '/php/types1.php?objid='+strObjid,
                reader: {
                    type: 'json',
                    root: 'results'
                }
            },
            fields: [
                {name: 'type'},{name: 'Propositia'}
            ]
    });
	
	
	 ColumnChartStore1 = Ext.create('Ext.data.JsonStore', {
        storeId: 'ColumnChartStore1',
		autoLoad: true,
            storeId: 'ColumnChartStore1',
            proxy: {
                type: 'ajax',
                url: '/Json/ColumnChartStore.json',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
                {
                    name: 'season'
                },
                {
                    name: 'total'
                }
            ]
    });
	
Ext.define('Borsuko.view.ui.totals', {
    extend: 'Ext.panel.Panel',

    id: 'totals',

    initComponent: function() {
        var me = this;
        me.items = [
            {
                xtype: 'form',
                autoRender: true,
                autoShow: true,
                frame: true,
                //height: 850,
                id: 'tabs',
                itemId: 'tabs',
                maintainFlex: true,
                bodyPadding: '',
                animCollapse: false,
                collapseFirst: false,
                collapsed: false,
                collapsible: true,
                frameHeader: false,
                title: 'Інформація про об`єкт',
                titleCollapse: true,
                pollForChanges: true,
                paramsAsHash: true,
                standardSubmit: true,
                trackResetOnLoad: true,
                items: [
                    {
                        xtype: 'container',
                        height: 220,
                        layout: {
                            type: 'column'
                        },
                        items: [
                            {
                                xtype: 'container',
                                border: 0,
                                id: 'Container1',
                                padding: 10,
                                width: 338,
                                items: [
                                    {
                                        xtype: 'textfield',
                                        id: 'nomer',
                                        width: 200,
                                        toFrontOnShow: false,
                                        fieldLabel: 'Номер Об`єкту',
                                        preventMark: true
                                    },
                                    {
                                        xtype: 'datefield',
                                        id: 'date',
                                        width: 200,
                                        name: 'date',
                                        fieldLabel: 'Дата Об`єкту'
                                    },
                                    {
                                        xtype: 'textfield',
                                        id: 'nazva',
                                        width: 300,
                                        fieldLabel: 'Назва Об`єкту',
                                        emptyText: 'Назва'
                                    }
                                ]
                            },
							
							
							{
                                xtype: 'chart',
                                height: 190,
								id: "PieChart",
                                width: 190,
                                shadow: true,
                                animate: true,
								legend: "{position: 'bottom'}",
                                store: 'StoreForPie',
                                //theme: 'Blue',
                                series: [
                                    {
                                        type: 'pie',
										field: 'Propositia',
                                        highlight: {
										  segment: {
											margin: 10
										  }
										},                                 
										label: {
                                            field: 'type',
                                            display: 'rotate',
                                            contrast: true,
                                            font: '11px Arial'
                                        },
                                        //showInLegend: true,
                                       tips: {
									  trackMouse: true,
									  width: 180,
									  height: 28,
									  
									  renderer: function(storeItem, item) {
										var total = 0;
										StoreForPie.each(function(rec) {
											total += rec.get('Propositia');
										});
										this.setTitle(storeItem.get('type') + ' на : ' + storeItem.get('Propositia')  + ' грн');
									  }
									},
                                                //title: 'pieChart',
                                                //donut: 10,
                                                style: {
												colors:['#F8869D','#25CDF2',
											 '#FFAA3C','#DEFE39',
											 '#AB63F6'] //eSprit 80s
                                                }
                                            }
                                        ]
                                    },
									
									
									
                            {
                                xtype: 'chart',
                                height: 230,
                                id: 'columnChart',
                                width: 230,
                                animate: true,
                                insetPadding: 20,
                                store: 'ColumnChartStore1',
                                series: [
                                    {
                                        type: 'column',
                                        highlight: true,
                                        tips: {
                                            trackMouse: true,
                                            width: 180,
                                            height: 28,
                                            renderer: function(storeItem,
                                            item){
                                                this.setTitle(storeItem.get('season') + ': ' + storeItem.get('total') + 'грн');
                  }
                },
                                                xField: '[\'season\']',
                                                yField: [
                                                    'total'
                                                ],
                                                style: 'background:red'
                                            }
                                        ],
                                        axes: [
                                            {
                                                type: 'Category',
                                                fields: [
                                                    'season'
                                                ],
                                                position: 'bottom',
                                                title: ''
                                            },
                                            {
                                                type: 'Numeric',
                                                fields: [
                                                    'total'
                                                ],
                                                position: 'left',
                                                title: 'гроші'
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'container',
                                        id: 'Container3',
                                        padding: 10,
                                        width: 338,
                                        stateful: false,
                                        focusOnToFront: false,
                                        items: [
                                            {
                                                xtype: 'textfield',
                                                id: 'Suma',
                                                width: 150,
                                                fieldLabel: 'Сума',
                                                labelWidth: 75,
                                                emptyText: 'Сума'
                                            },
                                            {
                                                xtype: 'textfield',
                                                id: 'Propozycija',
                                                width: 150,
                                                fieldLabel: 'Пропзиція',
                                                labelWidth: 75,
                                                emptyText: 'Пропозиція'
                                            },
                                            {
                                                xtype: 'textfield',
                                                id: 'Dohid',
                                                width: 150,
                                                fieldLabel: 'Дохід',
                                                labelWidth: 75,
                                                emptyText: 'Дохід'
                                            },
                                            {
                                                xtype: 'textfield',
                                                id: 'Moment_Dollar',
                                                width: 150,
                                                name: 'Moment_Dollar',
                                                fieldLabel: 'Курс $',
                                                labelWidth: 75
                                            },
                                            {
                                                xtype: 'textfield',
                                                id: 'Moment_Euro',
                                                width: 150,
                                                name: 'Moment_Euro',
                                                fieldLabel: 'Курс €',
                                                labelWidth: 75
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                xtype: 'gridpanel',
                                //height: 300,
                                id: 'grid_1',
                                bodyBorder: true,
                                frameHeader: false,
                                title: 'Обрані товари',
                                forceFit: true,
                                store: 'TotalObjectStore1',
                                columnLines: true,
								listeners: {
								itemclick: function() {
									Ext.getCmp('del').setDisabled(false)
									//sendUpdateRequest();
									
								}
							},
                                plugins: [
                                   editor
                                ],
                                columns: [
                                    {
                                        xtype: 'gridcolumn',
                                        //hidden: true,
                                        dataIndex: 'zamovleniaID',
                                        text: '№'
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        autoRender: true,
                                        layout: {
                                            type: 'fit'
                                        },
                                        dataIndex: 'type',
										summaryType: 'count',
										summaryRenderer: function(value, summaryData, dataIndex) {
											return "к-сть: " + value;
										},	
                                        text: 'Тип'
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        //hidden: true,
                                        dataIndex: 'categoryName',
                                        text: 'Категорія'
                                        
										//summaryType: 'count', 
										//summaryRenderer: function(v, params, data){ return ((v === 0 || v > 1) ? '(' + v +' Tasks)' : '(1 Task)');}
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        //hidden: true,
                                        dataIndex: 'SubCategoryName',
                                        text: 'Субкатегорія'
                                        
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        dataIndex: 'Model',
                                        text: 'Модель',
                                        field: {
                                            xtype: 'combobox',
                                            displayField: 'vykonavci',
                                            queryMode: 'local',
                                            store: 'vykonavciStore',
                                            valueField: 'vykonavci'
                                        }
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        dataIndex: 'Description',
                                        text: 'Опис Товару',
                                        field: {
                                            xtype: 'combobox',
                                            displayField: 'ObjectThemesName',
                                            queryMode: 'local',
                                            store: 'ObjThemesStore',
                                            valueField: 'ObjectThemesName'
                                        }
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        //hidden: true,
                                        dataIndex: 'Vendor',
                                        text: 'Виробник',
										editor: new fm.TextField({allowBlank: false}),
                                        field: {
                                            xtype: 'textfield'
                                        }
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        dataIndex: 'Count',
                                        text: 'К-сть',
										summaryType: "sum", 
										summaryRenderer: function(value, summaryData, dataIndex) {
											return value;
										},	
                                        field: {
                                            xtype: 'numberfield'
                                        }
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        dataIndex: 'OdVymir',
                                        text: 'Од.Виміру',
                                        field: {
                                            xtype: 'textfield'
                                        }
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        dataIndex: 'Time',
                                        text: 'Час монт. 1',
										renderer : function(v){ return v + ' хв'; }/*,
										summaryType: "sum", 
										summaryRenderer: function(value, summaryData, dataIndex) {
											return "разом " + value + " хв.";
										}	*/
										
                                        
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        dataIndex: 'TotalTime',
                                        text: 'Заг.Час',
										summaryType: "sum", 
										
										summaryRenderer: function(value, summaryData, dataIndex) {
											return "разом " + value + " хв.";
										},	
										 renderer: function(v, params, record) 	{return record.data.Count * record.data.Time + ' хв';	},
                                        field: {
                                            xtype: 'textfield'
                                        }
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        dataIndex: 'Price',
                                        text: 'Ціна в вал.',
                                        field: {
                                            xtype: 'textfield'
                                        },
										renderer: function(v, params, record) 	{ 
										switch(record.data.Valiuta)
										{
										case 'dollar':
										  var ItemValiuta = '<span style="color:green;">'+v+' доларів ($) </span>';
										  break;
										case 'grivna':
										  var ItemValiuta = '<span style="color:blue;"> '+v+' гривень (?) </span>';
										  break;
										case 'euro':
										  var ItemValiuta = '<span style="color:orange;"> '+v+' євро (€) </span>';
										  break;
										default:
										  var ItemValiuta = '<span style="color:red;"> '+v+' Невизначено</span>';
										}

										return ItemValiuta;
										}
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        dataIndex: 'Valiuta',
										hidden: true,
                                        text: 'Валюта',
                                        field: {
                                            xtype: 'textfield'
                                        }
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        dataIndex: 'PriceGrn',
                                        text: 'Ціна в грн',
										summaryType: 'PriceGrn',
                                        field: {
                                            xtype: 'textfield'
                                        },
										renderer: function(v, params, record) 	{ 
										if (record.data.Valiuta	 == 'dollar') { 
										var strgrivna = record.data.Price * record.data.Moment_Dollar 
										};
										if(record.data.Valiuta	 == 'grivna') { 
										var strgrivna = record.data.Price * strGrivna 
										};
										if(record.data.Valiuta	 == 'euro') { var strgrivna = record.data.Price * record.data.Moment_Euro};
										//return '<span style="color:green;">'strgrivna.toFixed(2) + ' грн'+'%</span>';	
										return '<span style="color:blue;">'+strgrivna.toFixed(2) + ' грн'+'</span>';
										//console.log(record.data.Moment_Dollar);
										}
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        dataIndex: 'cost',
                                        text: 'Сума',
										summaryType: "totalCost", 
										summaryRenderer: function(value, summaryData, dataIndex) {
										return value;
										},
										
                                        field: {
                                            xtype: 'textfield'
                                        },
										renderer: function(v, params, record) 	{ 
										var pPrice = record.data.Price;
										var pCount = record.data.Count;
										var pDollar = record.data.Moment_Dollar;
										var pEuro = record.data.Moment_Euro;
										var pNacinka = record.data.Nacinka;
										var pPriceCount = pPrice * pCount;
										
										if (record.data.Valiuta	 == 'dollar') { var strFinalGrivna = (pCount * pPrice) * pDollar};
										if(record.data.Valiuta	 == 'grivna') { var strFinalGrivna = (pCount * pPrice) * strGrivna };
										if(record.data.Valiuta	 == 'euro') { var strFinalGrivna = (pCount * pPrice) * pEuro};
										return '<span style="color:blue;"> '+ strFinalGrivna.toFixed(2) + ' грн </span>';
		}
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        dataIndex: 'Nacinka',
                                        text: '% Націнка',
										renderer: pctChange,
                                        field: {
                                            xtype: 'textfield'
                                        }
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        dataIndex: 'PriceFor1',
                                        text: 'Ціна за 1 з нац.',
                                        field: {
                                            xtype: 'textfield'
                                        },
										renderer: function(v, params, record){ 
		var pPrice = record.data.Price;
		var pCount = record.data.Count;
		var pDollar = record.data.Moment_Dollar;
		var pEuro = record.data.Moment_Euro;
		var pNacinka = record.data.Nacinka;
		var pPriceCount = pPrice * pCount;
		
		
		//if (record.data.Valiuta	 == 'dollar') { var strPriceFor1 = ((((record.data.Price)*record.data.Nacinka)/100)+(record.data.Price)).toFixed(2) * record.data.Moment_Dollar };
		if (record.data.Valiuta	 == 'dollar') { var strPriceFor1 = ((((pPrice * pDollar)*pNacinka)/100)+(pPrice * pDollar)).toFixed(2) };
		if(record.data.Valiuta	 == 'grivna') { var strPriceFor1 = ((((record.data.Price* strGrivna)*record.data.Nacinka)/100)+(record.data.Price* strGrivna)).toFixed(2)};
		if(record.data.Valiuta	 == 'euro') { var strPriceFor1 = ((((pPrice * pEuro)*pNacinka)/100)+(pPrice * pEuro)).toFixed(2) };
		return '<span style="color:blue;"> '+ strPriceFor1 + ' грн </span>';
		
		
		}
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        hidden: true,
                                        dataIndex: 'dollar',
                                        text: 'Доллар'
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        hidden: true,
                                        dataIndex: 'euro',
                                        text: 'Євро'
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        dataIndex: 'Propozycija',
										//summaryType: 'Propozycija',
                                        text: 'Пропозиція',
										summaryType: "sum", 
										summaryRenderer: function(value, summaryData, dataIndex) {
										strProp = value.toFixed(2);
										return value.toFixed(2) + " грн.";
										},
											
										renderer: function(v, params, record){ 
										var pPrice = record.data.Price;
										var pCount = record.data.Count;
										var pDollar = record.data.Moment_Dollar;
										var pEuro = record.data.Moment_Euro;
										var pNacinka = record.data.Nacinka;
										var pPriceCount = pPrice * pCount;
										
										if (record.data.Valiuta	 == 'dollar') { var strProposicija = pCount * ((((pPrice * pDollar)*pNacinka)/100)+(pPrice * pDollar)).toFixed(2) };
										if(record.data.Valiuta	 == 'grivna') { var strProposicija = pCount * ((((record.data.Price* strGrivna)*record.data.Nacinka)/100)+(record.data.Price* strGrivna)).toFixed(2)};
										if(record.data.Valiuta	 == 'euro')   { var strProposicija = pCount * ((((pPrice * pEuro)*pNacinka)/100)+(pPrice * pEuro)).toFixed(2) };
										
										return '<span =style="color:blue;"> '+ strProposicija.toFixed(2) + ' грн </span>';
										}
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        dataIndex: 'Dohid',
										summaryType: 'sum',
										summaryRenderer: function(value, summaryData, dataIndex) {
										strDohid =  value.toFixed(2);
										return value.toFixed(2) + " грн.";
										},
                                        text: 'Дохід',
										renderer: function(v, params, record){ 
	
		//var pPrice = record.data.Price;
		var pPrice = record.data.Price;
		var pCount = record.data.Count;
		var pDollar = record.data.Moment_Dollar;
		var pEuro = record.data.Moment_Euro;
		var pNacinka = record.data.Nacinka;
		var pPriceCount = pPrice * pCount;
		
		
		if (record.data.Valiuta	 == 'dollar') { var strDohidGrn = (pCount * ((((pPrice * pDollar)*pNacinka)/100)+(pPrice * pDollar)).toFixed(2)) - (pCount * pPrice) * pDollar};
		if(record.data.Valiuta	 == 'grivna') { var strDohidGrn = (pCount * ((((record.data.Price* strGrivna)*record.data.Nacinka)/100)+(record.data.Price* strGrivna)).toFixed(2)) - (pCount * pPrice) * strGrivna };
		if(record.data.Valiuta	 == 'euro') { var strDohidGrn = (pCount * ((((pPrice * pEuro)*pNacinka)/100)+(pPrice * pEuro)).toFixed(2)) - (pCount * pPrice) * pEuro};
		
		if (strDohidGrn.toFixed(2)	< 0) { return '<span style="font-weight: bold"; style="color:red">' + strDohidGrn.toFixed(2) + ' грн </span>';};
		return '<span style="color:blue;"> '+ strDohidGrn.toFixed(2) + ' грн </span>';
		} 
                                    }
                                ],
                                viewConfig: {
                                    width: 2000
                                },
                                dockedItems: [
                                    {
                                        xtype: 'pagingtoolbar',
                                        afterPageText: 'із {0}',
                                        beforePageText: 'Сторінка',
                                        displayInfo: true,
                                        displayMsg: 'Показано {0} - {1} із {2}',
                                        emptyMsg: 'Записи відсутні',
                                        firstText: 'Перша сторінка',
                                        lastText: 'Остання сторінка',
                                        nextText: 'Наступна сторінка',
                                        prependButtons: true,
                                        prevText: 'Попередня сторінка',
                                        refreshText: 'Оновити',
                                        store: 'TotalObjectStore1',
                                        dock: 'bottom'
                                    },
                                    {
                                        xtype: 'toolbar',
                                        dock: 'top',
                                        items: [
                                            {
                                                xtype: 'button',
                                                id: 'show',
                                                text: 'Добавити додаткові комплектуючі',
												handler : function(){
												var strObjid = hash['objid'];
												window.location = "./AddAditional.php?objid="+strObjid;	
												}
                                            },
                                            {
                                                xtype: 'button',
                                                id: 'del',
												handler : function(){
												sendRemoveRequest();
												},
												
												
                                                text: 'Видалити комплектуючі'
                                            },
                                            {
                                                xtype: 'button',
                                                id: 'export',
                                                text: 'Експорт для клієнта'
                                            },
                                            {
                                                xtype: 'button',
                                                id: 'export_r',
                                                text: 'Експорт як рахунок-фактуру'
                                            },
                                            {
                                                xtype: 'button',
                                                id: 'limit_card',
                                                style: {
                                                    marginLeft: '200px'
                                                },
                                                text: 'Активне обладнання'
                                            },
                                            {
                                                xtype: 'button',
                                                id: 'save_as',
                                                text: 'Монтажне обладнання'
                                            }
                                        ]
                                    }
                                ],
                                selModel: Ext.create('Ext.selection.CheckboxModel', {
                                    allowDeselect: true
                                }),
                                features: [
                                    {
                                        ftype: 'groupingsummary'
                                    }
                                ]
                            }
                        ]
                    }
                ];
        me.callParent(arguments);
    }
});

editor.on('afteredit', function () 
{
sendUpdateRequest();
});

function sendUpdateRequest(){
	
	        var jsonData = new Array();                  
			for(i=0;i<TotalObjectStore1.getCount();i++) {
            record = TotalObjectStore1.getAt(i);
            jsonData.push(record.data);
        }     
		
		jsonData = Ext.encode(jsonData); 		
		Ext.Ajax.request({
		    url:'./php/total.php?action=saveData', //php function that saves the data
		  	params:{data:jsonData},
            success:function(responce, action) {
			
			
			
			
			TotalObjectStoreForDestroy = Ext.create('Ext.data.JsonStore', {
			storeId: 'TotalObjectStoreForDestroy',
			autoLoad: true,
			groupField: 'type',
				proxy: {
					type: 'ajax',
					url: '/php/total.php?action=showPropositiaDohid&objid='+strObjid,
					reader: {
						type: 'json',
						root: 'results'
					}
				},
				fields: [
					
					{
						type: 'float',				
						name: 'suma'
					},
					{
						type: 'float',				
						name: 'propozycija'
					},
					{
						type: 'float',				
						name: 'dohid'
					}
				],
				listeners: {
							load: function() {
							
							Ext.getCmp("Propozycija").setValue(TotalObjectStoreForDestroy.data.items[0].data.propozycija);
							Ext.getCmp("Suma").setValue(TotalObjectStoreForDestroy.data.items[0].data.suma);
							Ext.getCmp("Dohid").setValue(TotalObjectStoreForDestroy.data.items[0].data.dohid);
							}
						}
		});
			
			
            },
            failure: function(form, action) {
                alert('Oops the delete did not work out too well!');
            }
		});        
	
	changeChart();
    }  
	
	function sendRemoveRequest(){ 
		if(TotalObjectStore1.getCount()<1){

			return;
		}
		var jsonData = new Array();       
		var cr = Ext.getCmp('grid_1').getSelectionModel().selected;
		var Slenght = Ext.getCmp('grid_1').getSelectionModel().selected.length;
		if(Slenght > 0) {
			for(i=0; i< Slenght;i++) {
				strModelId = cr.items[i].data.ModelId
				zamovleniaID = cr.items[i].data.zamovleniaID
					jsonData = Ext.encode(jsonData);
					Ext.Ajax.request({
				   url:'./php/total.php?action=removeRecord', //php function that saves the data
					params:{strModelId:strModelId,
					zamovleniaID:zamovleniaID		
					},
					success:function(responce, action) {
						var rowCorection=0
							rowIndex = cr[0];
							TotalObjectStore1.removeAt(rowIndex-rowCorection);
							rowCorection++;
					},
					failure: function(form, action) {
						alert('Oops the delete did not work out too well!');
					}
				});  
			}
		}		
//}		
		changeChart();
	}  
  	/*
	function sendAddRequest(){		
		//waitMask.show();
		//var cr = grid_1.getSelectionModel().getSelectedCellRange();
		var cr = grid_1.getSelectionModel().getSelectedCell();
		var rowIndex = cr[0];
		Ext.Ajax.request({
		   url:'./php/total.php?action=addRecord', //php function that saves the data		  	
            success:function(responce, action) {
            	var Record = Ext.data.Record.create(TotalObjectStore1.fields.items);            	
				var newRecord = new Record(Ext.decode(responce.responseText));  
                grid_1.stopEditing();
                TotalObjectStore1.insert(rowIndex, newRecord);
                grid_1.startEditing(rowIndex, 1);   
				//waitMask.hide()      	
                //alert('Congrats!  Record added!');
            },
            failure: function(form, action) {
                alert('Oops the delete did not work out too well!');
            }
		});        
    }  
	*/
	
	
	function changeChart(){
	
	ColumnChartStore1.destroy();
	StoreForPie.destroy();
			ColumnChartStore1 = Ext.create('Ext.data.JsonStore', {
        storeId: 'ColumnChartStore1',
		autoLoad: true,
            storeId: 'ColumnChartStore1',
            proxy: {
                type: 'ajax',
                url: '/Json/ColumnChartStore.json',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
                {
                    name: 'season'
                },
                {
                    name: 'total'
                }
            ]
    });
		StoreForPie = Ext.create('Ext.data.JsonStore', {
        storeId: 'StoreForPie',
		autoLoad: true,
            proxy: {
                type: 'ajax',
                url: '/php/types1.php?objid='+strObjid,
                reader: {
                    type: 'json',
                    root: 'results'
                }
            },
            fields: [
                {name: 'type'},{name: 'Propositia'}
            ]
    });
	Ext.getCmp('PieChart').bindStore(StoreForPie);
	Ext.getCmp('columnChart').bindStore(ColumnChartStore1);

	//Ext.getCmp('PieChart').redraw()
	//columnChart.redraw()
	};

