/*
 * File: app/view/ui/ordering.js
 * Date: Mon Sep 12 2011 16:32:25 GMT+0300 (FLE Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.0.
 * http://www.sencha.com/products/designer/
 *
 * This file will be auto-generated each and everytime you export.
 *
 * Do NOT hand edit this file.
 */
Ext.Loader.setConfig({enabled: true});
Ext.grid.RowEditor.prototype.cancelBtnText = "Відмінити";
Ext.grid.RowEditor.prototype.saveBtnText = "Зберегти";
Ext.grid.RowEditor = new Ext.grid.RowEditor();
Ext.Loader.setPath('Ext.ux', '/ext-4.0.2a/examples/ux');
Ext.require([
    //'Ext.grid.*',
    //'Ext.data.*',
    'Ext.ux.grid.FiltersFeature',
    'Ext.toolbar.Paging'
]);
var winVydaty;
var winInfo;
//var currentOrderId;

var url = {
        local:  'grid-filter.json',  
        remote: 'grid-filter.php'
    };

    var encode = false;
    var local = false;
	
	 Ext.define('Product', {
    extend: 'Ext.data.Model',
    fields: [ 
			{ type: 'int', name: 'id' },
			{ type: 'string',name: 'status' },
			{ type: 'int', name: 'statusid' },
			{ type: 'string',name: 'book_name' },
			{ type: 'string',name: 'book_outhors' },
			{ type: 'int', name: 'pages' },
			{ type: 'int', name: 'year' },
			{ type: 'string',name: 'book_theme_name' },
			{ type: 'string',name: 'publisher' },
			{ type: 'date', name: 'date' },
			{ type: 'string',name: 'other' },
			{ type: 'int',name: 'books_history_id' },
			{ type: 'string',name: 'ISBN' }
			]
});

	
var GridName = "Books" 
	
    var filters = {
        ftype: 'filters',
        encode: encode, 
        local: local,   

        filters: [
			
			{ type: 'int', dataIndex: 'id' },
			{ type: 'int', dataIndex: 'statusid' },
			{ type: 'string',dataIndex: 'book_name' },
			{ type: 'string',dataIndex: 'status' },
			{ type: 'string',dataIndex: 'book_outhors' },
			{ type: 'int', dataIndex: 'pages' },
			{ type: 'int', dataIndex: 'year' },
			{ type: 'string',dataIndex: 'book_theme_name' },
			{ type: 'string',dataIndex: 'publisher' },
			{ type: 'date', dataIndex: 'date' }
			
        ]
    };
	
	MaxNomer = Ext.create('Ext.data.JsonStore', {
       autoLoad: true,
            storeId: 'MaxNomer',
            proxy: {
                type: 'ajax',
                url: './php/SelectMaxOrder.php',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
                {
                    name: 'Max'
                }
            ],
			listeners: {
						load: function() {
						
						Ext.getCmp("id").setValue(parseInt(MaxNomer.data.items[0].data.Max)+1);
						//Ext.getCmp("id").setValue(readerid);
						}
					}
    });

booksAll = Ext.create('Ext.data.JsonStore', {
	autoLoad: true,
	 pageSize: 20,
            autoSync: true,
            storeId: 'booksAll',
            proxy: {
                type: 'ajax',
                url: './php/booksNotDeleted.php',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
			{ name: 'id' },
			{ name: 'statusid' },
			{ name: 'book_name' },
			{ name: 'status' },
			{ name: 'book_outhors' },
			{ name: 'pages' },
			{ name: 'year' },
			{ name: 'book_theme_name' },
			{ name: 'publisher' },
			{ name: 'date' },
			{ name: 'other' },
			{ name: 'books_history_id' },
			{ name: 'ISBN' }

            ]
    });
	
	CurrentStore = 'booksAll';

Ext.define('Borsuko.view.ui.ordering', {
    extend: 'Ext.panel.Panel',


    initComponent: function() {
        var me = this;
        me.items = [
            {
                xtype: 'form',
                autoRender: true,
                autoShow: true,
                frame: true,
                height: 750,
                id: 'tabs',
                itemId: 'tabs',
                maintainFlex: true,
                bodyPadding: '',
                animCollapse: false,
                collapseFirst: false,
                collapsed: false,
                collapsible: true,
                frameHeader: false,
                title: 'Книжки',
                titleCollapse: true,
                pollForChanges: true,
                paramsAsHash: true,
                standardSubmit: true,
                trackResetOnLoad: true,
                items: [
				
				{
                xtype: 'fieldset',
                frame: true,
                padding: 10,
                
                items: [
                    {
                        xtype: 'textfield',
                        id: 'id',
                        width: 350,
						disabled: true,
                        fieldLabel: 'Номер',
                        labelWidth: 150
                    },

					{
                        xtype: 'datefield',
						format : "d/m/Y H:i",
                        id: 'date',
						editable: true,
                        width: 500,
                        name: 'date',
                        fieldLabel: 'Замовити на час',
						listeners: {
						render: function() {
							this.setValue(new Date());
						}
						},
                        labelWidth: 150
                    },
                    {
                        xtype: 'textfield',
                        id: 'name1',
                        name: 'name1',
                        width: 500,
                        fieldLabel: 'Ім\'я',
                        labelWidth: 150,
                        emptyText: 'Ім\'я'
                    },
                    {
                        xtype: 'textfield',
                        id: 'name2',
                        width: 500,
                        name: 'name2',
                        fieldLabel: 'Прізвище',
                        labelWidth: 150,
                        emptyText: 'Прізвище'
                    },
					{
                        xtype: 'textfield',
                        id: 'surname',
                        width: 500,
                        name: 'surname',
						//editable: false,
						//disabled: true,
                        fieldLabel: 'По-батькові',
                        labelWidth: 150,
                        emptyText: 'По-батькові'
                    },
                    
					{
                        xtype: 'textfield',
						vtype: 'email',
                        id: 'email',
                        width: 500,
                        name: 'email',
                        fieldLabel: 'Електронна пошта',
                        labelWidth: 150,
                        emptyText: 'Електронна пошта'
                    },					
					
					{
                        xtype: 'textfield',
						//maskRe: /[0-9.]/,
                        id: 'idcard',
                        width: 500,
                        fieldLabel: '№ квитка/студентського',
                        labelWidth: 150,
                        emptyText: '№ квитка/студентського'
                    },
					
					{
                        xtype: 'textarea',
						//maskRe: /[0-9.]/,
                        id: 'notes',
                        width: 500,
                        fieldLabel: 'Примітка',
                        labelWidth: 150,
                        emptyText: 'Примітка'
                    }
    
                ]
            },
			

                    {
                        xtype: 'gridpanel',
                        id: GridName,
						height: 400,
                        bodyBorder: true,
                        frameHeader: false,
                        store: CurrentStore,
						selModel: Ext.create('Ext.selection.CheckboxModel', { }),

                        columnLines: true,
                        features: [filters],
                        		columns: [
                            /*{
                                xtype: 'gridcolumn',
								width: 150,
                                dataIndex: 'State',
                                text: 'Стан книжки',
                                field: {
									 xtype: 'combobox',
									 editable: false,
									displayField: 'name',
									queryMode: 'local',
									store: 'StanObjektu',
									valueField: 'abbr'
                                    
                                },
									renderer: function(v, params, record) 	{ 
								if(record.data.State	 == '1') { 
								var stan = 'відкр.';
								var color = 'green';
								};
								if(record.data.State	 == '0') { 
								var stan = 'закр.';
								var color = 'gray'; var dekor =  'line-through';
								};
								return '<span style="color:' + color + '">' + stan + '</span>';
								}
                            },*/
                            {
                                xtype: 'gridcolumn',
								width: 50,
								//width: 41,
                                autoRender: true,
                                layout: {
                                    type: 'fit'
                                },
                                dataIndex: 'id',
                                text: 'Номер',
								filtrable:true,
								renderer: GreenGrtayColor
                            },
                            {
                                xtype: 'gridcolumn',
								width: 150,
								//width: 41,
                                dataIndex: 'book_name',
                                text: 'Назва книжки',
								renderer: GreenGrtayColor
                            },
                            {
                                xtype: 'gridcolumn',
								width: 150,
								//width: 41,
                                dataIndex: 'book_outhors',
                                text: 'Автори',
								renderer: GreenGrtayColor
                            },
                            {
                                xtype: 'gridcolumn',
								width: 150,
                                dataIndex: 'pages',
                                text: 'Кількість сторінок',
								renderer: GreenGrtayColor
                            },
                            {
                                xtype: 'gridcolumn',
								width: 150,
                                dataIndex: 'year',
                                text: 'Рік видання',
								renderer: GreenGrtayColor
                            },
                            {
                                xtype: 'gridcolumn',
								width: 100,
                                dataIndex: 'book_theme_name',
                                text: 'Жанр',
								renderer: GreenGrtayColor
                            },
                            {
                                xtype: 'gridcolumn',
								width: 100,
                                dataIndex: 'publisher',
                                text: 'Видавець',
								renderer: GreenGrtayColor
                            }
                          ],

						  listeners: {
							/*selectionchange: function(model, records) {
								if (records[0]) {
									var book_id = Ext.getCmp(GridName).getSelectionModel().selected.items[0].raw.id;
									bookInfoGrid.getStore().load({ params:{book_id: book_id} });
								}
							}*/
						},
                        viewConfig: {
                            width: 2000
                        },
						 dockedItems: [
							{
                                xtype: 'toolbar',
								id: 'toolbarTop',
                                dock: 'top',
                                items: [ 
								{
									xtype: 'button',
									id: 'add',
									text: 'Замовити',
									iconCls: 'add',
									handler : function(){
									Order();
									}
								},
								{
									xtype: 'button',
									id: 'check',
									text: 'Перевірити',
									iconCls: 'check',
									handler : function(){
									CheckVisitor();
									}
								},
							]
                            },
							{
                                xtype: 'pagingtoolbar',
								pageSize: 20,
								id: 'pagingtoolbar',
                                afterPageText: 'із {0}',
                                beforePageText: 'Сторінка',
                                displayInfo: true,
                                displayMsg: 'Показано {0} - {1} із {2}',
                                emptyMsg: 'Записи відсутні',
                                firstText: 'Перша сторінка',
                                lastText: 'Остання сторінка',
                                nextText: 'Наступна сторінка',
                                prependButtons: true,
                                prevText: 'Попередня сторінка',
                                refreshText: 'Оновити',
								store: CurrentStore,
                                dock: 'bottom'
                            }
                        ]
				
                    }
                ]
            }
        ];
        me.callParent(arguments);
    }
});









function CheckVisitor(){		
		var str_idcard = Ext.getCmp("idcard").getValue();
		Ext.Ajax.request(
	{
		url: './php/check_visitor.php',
		params: {
				idcard: str_idcard
		},
		callback: function(options, success, response) {
				var responseObj = JSON.parse(response.responseText);

			if (responseObj.total == 1) {
				
				Ext.getCmp("name1").reset();
				Ext.getCmp("name2").reset();
				Ext.getCmp("surname").reset();
				Ext.getCmp("email").reset();
				Ext.getCmp("name1").setValue(responseObj.data[0].name1);
				Ext.getCmp("name2").setValue(responseObj.data[0].name2);
				Ext.getCmp("surname").setValue(responseObj.data[0].surname);
				Ext.getCmp("email").setValue(responseObj.data[0].email);
			}
			else{
				Ext.Msg.confirm('Читача в Базі не знайдено', 'Чи бажаєте зареєструвати нового читача?',
				function(btn){
					if(btn == 'yes'){
						
						window.open(
						  './add_reader.php?readerid='+str_idcard,
						  '_blank' // <- This is what makes it open in a new window.
						);

					}
				}
				);
				
									
			}

			},
		success: function() {},
		failure: function(response)
		{
			Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
		}
	})
		
	
	}
	
	
	
	




function Order()
	{		
	
		var id = Ext.getCmp("id").getValue();
		var date = Ext.getCmp("date").getValue();
		var name1 = Ext.getCmp("name1").getValue();
		var name2 = Ext.getCmp("name2").getValue();
		var surname = Ext.getCmp("surname").getValue();
		var email = Ext.getCmp("email").getValue();
		var idcard = Ext.getCmp("idcard").getValue();
		var notes = Ext.getCmp("notes").getValue();
		var selection =  Ext.getCmp(GridName).getSelectionModel().selected;
		var Slenght = selection.length;
		var currentOrderId = Ext.getCmp("id").getValue();
	
	
	Ext.Ajax.request(
	{
		url: './php/check_visitor.php',
		params: {
				idcard: idcard
		},
		callback: function(options, success, response) {
				var responseObj = JSON.parse(response.responseText);

			if (responseObj.total == 1) {
/*******************************************додаю замовлення*******************************************/
				Ext.Ajax.request({
				url: './php/InsertOrder.php',
				
				params: 
					{
						id:id,
						date:date,
						name1:name1,
						name2:name2,
						surname:surname,
						email:email,
						idcard:idcard,
						notes:notes
					},
					/*callback: function(options, success, response) {
						currentOrderId = response.responseText;
					},*/
					success: function()
					{
						//var MyGrid = Ext.getCmp(GridName).getView();
						//MyGrid.getStore().load();				
					},
					failure: function(response)
					{
						Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
					}
				});
/*******************************************додаю книги до замовлення*******************************************/	

		if(Slenght > 0) {
			
			for (var i=0 ; i<Slenght; i++)
			{
				var book_id = selection.items[i].data.id;
				Ext.Ajax.request({
				url: './php/InsertOrdered.php',
				params: 
					{
						book_id:book_id,
						currentOrderId:currentOrderId
					},
					success: function()
					{
					},
					failure: function(response)
					{
						Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
					}
				});
			}
			var MyGrid = Ext.getCmp(GridName).getView();
			MyGrid.getStore().load();	
		}
		else {Ext.MessageBox.alert('Message', 'Будьласка, добавте книги до замовлення!');}
		
				
			}
			else{
				Ext.Msg.alert('Помилка', 'такого читача в Базі не знайдено!');
			}

		},
		success: function() {},
		failure: function(response)
		{
			Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
		}
	})
	
	
    }

	function GreenGrtayColor (v, params, record) { 
			if(record.data.statusid == '3') { 
			var dekor =  'none';
			var color = 'green';
		};
		
		if(record.data.statusid	 == '5') { 
			var color = 'blue'; 
			var dekor =  'none';
		};
		
		if(record.data.statusid	 == '2') { 
			var color = 'black'; 
			var dekor =  'line-through';
		};
		
		if(record.data.statusid	 == '7') { 
			var color = 'gray'; 
			var dekor =  'line-through';
		};
		
		
		return '<span style="color:' + color + ';text-decoration:' + dekor + '">' + v + '</span>';
	}

function checker(stridcard) {
	var resp;
	Ext.Ajax.request(
	{
		url: './php/check_visitor.php',
		async   : false,
		params: {
				idcard: stridcard
		},
		callback: function(options, success, response) {
			resp = JSON.parse(response.responseText).total;
		},
		success: function() 
		{
			
		},
		failure: function(response)
		{
			Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
		}
	})	
	
	return resp;
						
}




	
						