/*
 * File: app/view/ui/registration.js
 * Date: Mon Sep 05 2011 19:04:54 GMT+0300 (FLE Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.0.
 * http://www.sencha.com/products/designer/
 *
 * This file will be auto-generated each and everytime you export.
 *
 * Do NOT hand edit this file.
 */
 Ext.Loader.setPath('Ext.ux', '/ext-4.0.2a/examples/ux');
Ext.require([
    //'Ext.grid.*',
    //'Ext.data.*',
    'Ext.ux.grid.FiltersFeature',
    'Ext.toolbar.Paging'
]);
 
var strUseOwn;
var strDollar;
var streuro;
var strGrivna;

    var encode = false;
    var local = false;
	
	Ext.define('Product', {
	extend: 'Ext.data.Model',
	fields: [ 
		{ type: 'int', name: 'event_id' },
		{ type: 'int', name: 'event_status_id' },
		{ type: 'string',name: 'event_status' },
		{ type: 'string',name: 'event_name' },
		{ type: 'string', name: 'sponsor' },
		{ type: 'date',name: 'date' },
		{ type: 'string',name: 'notes' }
		]
	});

	var GridName = "Events" 
    var filters = {
        ftype: 'filters',
        encode: encode, 
        local: local,   

        filters: [
			
			{ type: 'int', dataIndex: 'event_id' },
			{ type: 'int', dataIndex: 'event_status_id' },
			{ type: 'string', dataIndex: 'event_status' },
			{ type: 'string',dataIndex: 'event_name' },
			{ type: 'string',dataIndex: 'sponsor' },
			{ type: 'date', dataIndex: 'date' },
			{ type: 'string',dataIndex: 'notes' }
        ]
    };

MaxNomer = Ext.create('Ext.data.JsonStore', {
       autoLoad: true,
            storeId: 'MaxNomer',
            proxy: {
                type: 'ajax',
                url: './php/select_max_visitor_number.php',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
                {
                    name: 'Max'
                }
            ],
			listeners: {
						load: function() {
						
						Ext.getCmp("id").setValue(parseInt(MaxNomer.data.items[0].data.Max)+1);
						}
					}
    });

	eventsAll = Ext.create('Ext.data.JsonStore', {
	autoLoad: true,
	pageSize: 20,
            autoSync: true,
            storeId: 'eventsAll',
            proxy: {
                type: 'ajax',
                url: './php/eventsAll.php',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
			{ name: 'event_id' },
			{ name: 'event_status_id' },
			{ name: 'event_status' },
			{ name: 'event_name' },
			{ name: 'sponsor' },
			{ name: 'date' },
			{ name: 'notes' }
            ]
    });
	
	archieved_events = Ext.create('Ext.data.JsonStore', {
	autoLoad: true,
	pageSize: 20,
            autoSync: true,
            storeId: 'archieved_events',
            proxy: {
                type: 'ajax',
                url: './php/archieved_events.php',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
			{ name: 'event_id' },
			{ name: 'event_status_id' },
			{ name: 'event_status' },
			{ name: 'event_name' },
			{ name: 'sponsor' },
			{ name: 'date' },
			{ name: 'notes' }
            ]
    });
	
	new_events = Ext.create('Ext.data.JsonStore', {
	autoLoad: true,
	pageSize: 20,
            autoSync: true,
            storeId: 'new_events',
            proxy: {
                type: 'ajax',
                url: './php/new_events.php',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
			{ name: 'event_id' },
			{ name: 'event_status_id' },
			{ name: 'event_status' },
			{ name: 'event_name' },
			{ name: 'sponsor' },
			{ name: 'date' },
			{ name: 'notes' }
            ]
    });
	
	CurrentStore = 'eventsAll';

Ext.define('Borsuko.view.ui.registration', {
    extend: 'Ext.form.Panel',

    autoRender: true,
    autoShow: true,
    frame: true,
    id: 'form',
    itemId: 'form',
    styleHtmlContent: true,
    autoScroll: true,
    maintainFlex: true,
    layout: {
        type: 'auto'
    },
    bodyPadding: 10,
    animCollapse: false,
    collapseFirst: false,
    collapsed: false,
    collapsible: true,
    frameHeader: false,
    title: 'Новий Читач',
    titleCollapse: true,
    pollForChanges: true,
    paramsAsHash: true,
    standardSubmit: true,
    trackResetOnLoad: true,

    initComponent: function() {
        var me = this;
        me.items = [
		{
	xtype: 'gridpanel',
	id: GridName,
	height: 300,
	bodyBorder: true,
	frameHeader: false,
	store: CurrentStore,
	selModel: Ext.create('Ext.selection.RowModel', {
		allowDeselect: true
	}),

	columnLines: true,
	features: [filters],
			columns: [

		{
			xtype: 'gridcolumn',
			width: 50,
			//width: 41,
			autoRender: true,
			layout: {
				type: 'fit'
			},
			dataIndex: 'event_id',
			text: 'Номер',
			filtrable:true,
			renderer: GreenGrtayColor
		},
		{
			xtype: 'gridcolumn',
			width: 50,
			//width: 41,
			autoRender: true,
			layout: {
				type: 'fit'
			},
			dataIndex: 'event_status_id',
			text: 'status id',
			filtrable:true,
			hidden:true,
			renderer: GreenGrtayColor
		},
		{
			xtype: 'gridcolumn',
			width: 150,
			//width: 41,
			autoRender: true,
			layout: {
				type: 'fit'
			},
			dataIndex: 'event_status',
			text: 'Статус',
			filtrable:true,
			renderer: GreenGrtayColor
		},
		{
			xtype: 'gridcolumn',
			width: 300,
			//width: 41,
			dataIndex: 'event_name',
			text: 'Назва події',
			field: {
				xtype: 'textfield'
				
			},
			renderer: GreenGrtayColor
		},
		{
			xtype: 'gridcolumn',
			width: 300,
			//width: 41,
			dataIndex: 'sponsor',
			text: 'Оргінізатор події',
			field: {
				xtype: 'textfield'
				
			},
			renderer: GreenGrtayColor
		},
	   
		{
			xtype: 'gridcolumn',
			width: 300,
			dataIndex: 'notes',
			text: 'Примітка',
			field: {
				xtype: 'textarea'
			},
			renderer: GreenGrtayColor
		},
		
		{
			xtype: 'gridcolumn',
			width: 200,
			dataIndex: 'date',
			text: 'Час та дата події',
			field: {
				xtype: 'textfield'
				
			},
			renderer: GreenGrtayColor
		}
								   
	  ],

	  listeners: {
		/*itemclick: function(model, records) {
			var cr = Ext.getCmp(GridName).getSelectionModel().selected;
			Ext.getCmp('event_id').setValue(cr.items[0].raw.event_id)
			//Ext.getCmp('event_id').setValue(Ext.getCmp(GridName).getSelectionModel().selected.items[0].raw.event_id)
		},*/
		
		selectionchange: function(model, records) {
			if (records[0]) {
				var cr = Ext.getCmp(GridName).getSelectionModel().selected;
				Ext.getCmp('event_id').setValue(cr.items[0].raw.event_id)
			}
		}
							
		
	},

	  
	viewConfig: {
		width: 2000
	},
	 dockedItems: [
		{
			xtype: 'toolbar',
			id: 'toolbarTop',
			dock: 'top',
			items: [
			{
			xtype: 'combobox',
			id: 'books_tatus_toolbar',
			name: 'books_tatus_toolbar',
			emptyText: 'Статус',
			editable: false,
			displayField: 'event_status',
			fieldLabel: 'Статус події',
			queryMode: 'local',
			store: 'events_statuses',
			valueField: 'event_status_id',
			listeners: {
			select: {
				fn:function(combo, value) 
				{
					switch (combo.value)
				{
				
			case "0":
			CurrentStore = eventsAll;
				Ext.getCmp(GridName).view.store = CurrentStore;
				Ext.getCmp(GridName).view.refresh();
				Ext.getCmp("pagingtoolbar").bind("eventsAll");
				Ext.getCmp("pagingtoolbar").doRefresh();
				break;
			case "1":
			CurrentStore = new_events;
				Ext.getCmp(GridName).view.store = CurrentStore;
				Ext.getCmp(GridName).view.refresh();
				Ext.getCmp("pagingtoolbar").bind("new_events");
				Ext.getCmp("pagingtoolbar").doRefresh();
				break;
			case "2":
			CurrentStore = archieved_events;
				Ext.getCmp(GridName).view.store = CurrentStore;
				Ext.getCmp(GridName).view.refresh();
				Ext.getCmp("pagingtoolbar").bind("archieved_events");
				Ext.getCmp("pagingtoolbar").doRefresh();
				break;
				};
				}
			}
			}
		}
		]
		},
		
		{
			xtype: 'pagingtoolbar',
			pageSize: 20,
			id: 'pagingtoolbar',
			afterPageText: 'із {0}',
			beforePageText: 'Сторінка',
			displayInfo: true,
			displayMsg: 'Показано {0} - {1} із {2}',
			emptyMsg: 'Записи відсутні',
			firstText: 'Перша сторінка',
			lastText: 'Остання сторінка',
			nextText: 'Наступна сторінка',
			prependButtons: true,
			prevText: 'Попередня сторінка',
			refreshText: 'Оновити',
			store: CurrentStore,
			dock: 'bottom'
		}
	]
},

            {
                xtype: 'fieldset',
                frame: true,
                padding: 10,
                
                items: [
                    {
                        xtype: 'textfield',
                        id: 'id',
                        width: 350,
						disabled: true,
                        fieldLabel: 'Номер',
                        labelWidth: 150
                    },
					
					{
                        xtype: 'textfield',
                        id: 'event_id',
                        width: 350,
						disabled: true,
                        fieldLabel: 'Номер події',
                        labelWidth: 150
                    },
					{
                        xtype: 'datefield',
						format : "d/m/Y H:i:s",
                        id: 'date',
						editable: false,
						disabled: true,
                        width: 500,
                        name: 'date',
                        fieldLabel: 'Дата запису',
						listeners: {
						render: function() {
							this.setValue(new Date());
						}
						},
                        labelWidth: 150
                    },
                    {
                        xtype: 'textfield',
                        id: 'name1',
                        name: 'name1',
                        width: 500,
						//editable: false,
						//disabled: true,
                        fieldLabel: 'Ім\'я',
                        labelWidth: 150,
                        emptyText: 'Ім\'я'
                    },
                    {
                        xtype: 'textfield',
                        id: 'name2',
                        width: 500,
						//editable: false,
						//disabled: true,
                        name: 'name2',
                        fieldLabel: 'Прізвище',
                        labelWidth: 150,
                        emptyText: 'Прізвище'
                    },
					{
                        xtype: 'textfield',
                        id: 'surname',
                        width: 500,
                        name: 'surname',
						//editable: false,
						//disabled: true,
                        fieldLabel: 'По-батькові',
                        labelWidth: 150,
                        emptyText: 'По-батькові'
                    },
                    {
                        xtype: 'datefield',
						//maskRe: /[0-9.]/,
                        id: 'birthday',
                        width: 500,
						//editable: false,
						//disabled: true,
                        fieldLabel: 'Дата народження',
                        labelWidth: 150,
                        emptyText: 'Дата народження'
                    },
					
					{
                        xtype: 'textfield',
                        id: 'workplace',
                        width: 500,
                        name: 'workplace',
                        fieldLabel: 'місце праці/навчання',
                        labelWidth: 150,
                        emptyText: 'місце праці/навчання'
                    },
					{
                        xtype: 'textfield',
                        id: 'interests',
                        width: 500,
                        name: 'interests',
                        fieldLabel: 'фах/сфера інтересів',
                        labelWidth: 150,
                        emptyText: 'фах/сфера інтересів'
                    },
					{
                        xtype: 'textfield',
						vtype: 'email',
                        id: 'email',
                        width: 500,
                        name: 'email',
                        fieldLabel: 'Електронна пошта',
                        labelWidth: 150,
                        emptyText: 'Електронна пошта'
                    },					
					
					{
                        xtype: 'textfield',
						//maskRe: /[0-9.]/,
                        id: 'idcard',
                        width: 500,
                        fieldLabel: '№ квитка/студентського',
                        labelWidth: 150,
                        emptyText: '№ квитка/студентського'
                    },
					
					{
                        xtype: 'textarea',
						//maskRe: /[0-9.]/,
                        id: 'other',
                        width: 500,
                        fieldLabel: 'Примітка',
                        labelWidth: 150,
                        emptyText: 'Примітка'
                    }
    
                ]
            }
        ];
        me.dockedItems = [
            {
                xtype: 'toolbar',
                dock: 'bottom',
                items: [
                    {
                        xtype: 'button',
                        text: 'Додати відвідувача',
						iconCls: 'add',
						id: 'add',
						//disabled: true,
						handler : function(){
						AddVisitor()
						}
                    },
					{
                        xtype: 'button',
                        text: 'Перевірити відвідувача',
						iconCls: 'add',
						id: 'check',
						//disabled: true,
						handler : function(){
						CheckVisitor()
						}
                    }
                ]
            }
		
        ];
        me.callParent(arguments);
    
	
	}
	
	
});

	function AddVisitor(){		
		
		var str_idcard = Ext.getCmp("idcard").getValue();
		var str_event_id = Ext.getCmp("event_id").getValue();
		var str_other = Ext.getCmp("other").getValue();
		var str_name1 = Ext.getCmp("name1").getValue();
		var str_name2 = Ext.getCmp("name2").getValue();
		var str_surname = Ext.getCmp("surname").getValue();
		var str_birthday = Ext.getCmp("birthday").getValue();
		
		var str_workplace = Ext.getCmp("workplace").getValue();
		var str_email = Ext.getCmp("email").getValue();
		var str_interests = Ext.getCmp("interests").getValue();

	Ext.Ajax.request(
	{
		url: './php/insert_visitor.php',
		params: {

				event_id:str_event_id,
				name1: str_name1,
				name2: str_name2,
				surname: str_surname,
				birthday: str_birthday,
				other: str_other,
				workplace: str_workplace,
				email: str_email,
				interests: str_interests,
				idcard: str_idcard
		},
		success: function()
		{
			
			Ext.getCmp("event_id").reset();
			Ext.getCmp("date").reset();
			Ext.getCmp("name1").reset();
			Ext.getCmp("name2").reset();
			Ext.getCmp("surname").reset();
			Ext.getCmp("birthday").reset();
			Ext.getCmp("idcard").reset();
			Ext.getCmp("other").reset();
			Ext.getCmp("workplace").reset();
			Ext.getCmp("email").reset();
			Ext.getCmp("interests").reset();
			
			
			
			var newIdValue = parseInt(Ext.getCmp("id").getValue())+1
			Ext.getCmp("id").setValue(newIdValue);
		},
		failure: function(response)
		{
			Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
		}
	})
	}
	
	
	function CheckVisitor(){		
		var str_idcard = Ext.getCmp("idcard").getValue();
		var str_other = Ext.getCmp("other").getValue();
		Ext.Ajax.request(
	{
		url: './php/check_visitor.php',
		params: {
				idcard: str_idcard
		},
		callback: function(options, success, response) {
				var responseObj = JSON.parse(response.responseText);

			if (responseObj.total == 1) {
				
				Ext.getCmp("name1").reset();
				Ext.getCmp("name2").reset();
				Ext.getCmp("surname").reset();
				Ext.getCmp("birthday").reset();
				
				Ext.getCmp("name1").setValue(responseObj.data[0].name1);
				Ext.getCmp("name2").setValue(responseObj.data[0].name2);
				Ext.getCmp("surname").setValue(responseObj.data[0].surname);
				Ext.getCmp("birthday").setValue(responseObj.data[0].birthday);
			}
			else{
				Ext.Msg.confirm('Читача в Базі не знайдено', 'Чи бажаєте зареєструвати нового читача?',
				function(btn){
					if(btn == 'yes'){
						
						window.open(
						  './add_reader.php?readerid='+str_idcard,
						  '_blank' // <- This is what makes it open in a new window.
						);

					}
				}
				);
				
									
			}

			},
		success: function() {},
		failure: function(response)
		{
			Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
		}
	})
		
		

		
		
		
		/*
		
		
	Ext.Ajax.request(
	{
		url: './php/insert_visitor.php',
		params: {

				//nomer: str_nomer,
				//date: str_date,
				other: str_other,
				idcard: str_idcard
		},
		success: function()
		{
			Ext.getCmp("date").reset();
			Ext.getCmp("1name").reset();
			Ext.getCmp("2name").reset();
			Ext.getCmp("surname").reset();
			Ext.getCmp("birthday").reset();
			Ext.getCmp("idcard").reset();
			Ext.getCmp("other").reset();
			var newIdValue = parseInt(Ext.getCmp("id").getValue())+1
			Ext.getCmp("id").setValue(newIdValue);
			//Ext.MessageBox.alert('Дані Збережені!', 'Тепер можете');
		},
		failure: function(response)
		{
			Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
		}
	})*/
	}
	
		function GreenGrtayColor (v, params, record) { 
			if(record.data.statusid == '3') { 
			var dekor =  'none';
			var color = 'green';
		};
		
		if(record.data.statusid	 == '5') { 
			var color = 'blue'; 
			var dekor =  'none';
		};
		
		if(record.data.statusid	 == '2') { 
			var color = 'black'; 
			var dekor =  'line-through';
		};
		
		if(record.data.statusid	 == '7') { 
			var color = 'gray'; 
			var dekor =  'line-through';
		};
		
		
		return '<span style="color:' + color + ';text-decoration:' + dekor + '">' + v + '</span>';
	}
		
	