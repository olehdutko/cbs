/*
 * File: app/view/ui/edit_orders.js
 * Date: Mon Sep 12 2011 16:32:25 GMT+0300 (FLE Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.0.
 * http://www.sencha.com/products/designer/
 *
 * This file will be auto-generated each and everytime you export.
 *
 * Do NOT hand edit this file.
 */
Ext.Loader.setConfig({enabled: true});
Ext.grid.RowEditor.prototype.cancelBtnText = "Відмінити";
Ext.grid.RowEditor.prototype.saveBtnText = "Зберегти";
Ext.grid.RowEditor = new Ext.grid.RowEditor();
Ext.Loader.setPath('Ext.ux', '/ext-4.0.2a/examples/ux');
Ext.require([
    //'Ext.grid.*',
    //'Ext.data.*',
    'Ext.ux.grid.FiltersFeature',
    'Ext.toolbar.Paging'
]);
var winVydaty;
var winInfo;
//var currentOrderId;

var url = {
        local:  'grid-filter.json',  
        remote: 'grid-filter.php'
    };

    var encode = false;
    var local = false;
	
	 Ext.define('Product', {
    extend: 'Ext.data.Model',
    fields: [ 
			{ type: 'int', name: 'order_id' },
			{ type: 'date',name: 'date' },
			{ type: 'string', name: 'name1' },
			{ type: 'string',name: 'name2' },
			{ type: 'string',name: 'surname' },
			{ type: 'string',name: 'email' },
			{ type: 'string', name: 'idcard' },
			{ type: 'string', name: 'notes' },
			{ type: 'string',name: 'status' },
			{ type: 'string',name: 'isdeleted' }
			]
});

	
	
    var filters = {
        ftype: 'filters',
        encode: encode, 
        local: local,   

        filters: [
			
			{ type: 'int', dataIndex: 'order_id' },
			{ type: 'date', dataIndex: 'date' },
			{ type: 'string',dataIndex: 'name1' },
			{ type: 'string',dataIndex: 'name2' },
			{ type: 'string',dataIndex: 'surname' },
			{ type: 'string',dataIndex: 'email' },
			{ type: 'string', dataIndex: 'idcard' },
			{ type: 'string', dataIndex: 'notes' },
			{ type: 'string',dataIndex: 'status' },
			{ type: 'string',name: 'isdeleted' }
        ]
    };
	
/*

	ordersAll = Ext.create('Ext.data.JsonStore', {
	autoLoad: true,
	 pageSize: 20,
            autoSync: true,
            storeId: 'ordersAll',
            proxy: {
                type: 'ajax',
                url: './php/ordersAll.php',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
			{ name: 'order_id' },
			{ name: 'date' },
			{ name: 'name1' },
			{ name: 'name2' },
			{ name: 'surname' },
			{ name: 'email' },
			{ name: 'idcard' },
			{ name: 'notes' },
			{ name: 'status' },
			{ name: 'isdeleted' }

            ]
    });
	ordersNew = Ext.create('Ext.data.JsonStore', {
	autoLoad: true,
	 pageSize: 20,
            autoSync: true,
            storeId: 'ordersNew',
            proxy: {
                type: 'ajax',
                url: './php/ordersNew.php',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
			{ name: 'order_id' },
			{ name: 'date' },
			{ name: 'name1' },
			{ name: 'name2' },
			{ name: 'surname' },
			{ name: 'email' },
			{ name: 'idcard' },
			{ name: 'notes' },
			{ name: 'status' },
			{ name: 'isdeleted' }

            ]
    });
	ordersArchieved = Ext.create('Ext.data.JsonStore', {
	autoLoad: true,
	 pageSize: 20,
            autoSync: true,
            storeId: 'ordersArchieved',
            proxy: {
                type: 'ajax',
                url: './php/ordersArchieved.php',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
			{ name: 'order_id' },
			{ name: 'date' },
			{ name: 'name1' },
			{ name: 'name2' },
			{ name: 'surname' },
			{ name: 'email' },
			{ name: 'idcard' },
			{ name: 'notes' },
			{ name: 'status' },
			{ name: 'isdeleted' }

            ]
    });
	ordersDone = Ext.create('Ext.data.JsonStore', {
	autoLoad: true,
	 pageSize: 20,
            autoSync: true,
            storeId: 'ordersDone',
            proxy: {
                type: 'ajax',
                url: './php/ordersDone.php',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
			{ name: 'order_id' },
			{ name: 'date' },
			{ name: 'name1' },
			{ name: 'name2' },
			{ name: 'surname' },
			{ name: 'email' },
			{ name: 'idcard' },
			{ name: 'notes' },
			{ name: 'status' },
			{ name: 'isdeleted' }

            ]
    });
	ordersDeleted = Ext.create('Ext.data.JsonStore', {
	autoLoad: true,
	 pageSize: 20,
            autoSync: true,
            storeId: 'ordersDeleted',
            proxy: {
                type: 'ajax',
                url: './php/ordersDeleted.php',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
			{ name: 'order_id' },
			{ name: 'date' },
			{ name: 'name1' },
			{ name: 'name2' },
			{ name: 'surname' },
			{ name: 'email' },
			{ name: 'idcard' },
			{ name: 'notes' },
			{ name: 'status' },
			{ name: 'isdeleted' }

            ]
    });
*/
	
	
	
	
	
	
	
	
	
	
	
	
	
	ordered = Ext.create('Ext.data.JsonStore', {
	autoLoad: false,
	 pageSize: 20,
            autoSync: true,
            storeId: 'ordered',
            proxy: {
                type: 'ajax',
                url: './php/ordered.php',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
			{ name: 'id' },
			{ name: 'order_id' },
			{ name: 'book_id' },
			{ name: 'isdeleted' }
            ]
    });
	
CurrentStore = 'ordersAll';
Ext.define('Borsuko.view.ui.edit_orders', {
    extend: 'Ext.panel.Panel',


    initComponent: function() {
        var me = this;
        me.items = [
            {
                xtype: 'form',
                autoRender: true,
                autoShow: true,
                frame: true,
                //height: 750,
                id: 'tabs1',
                itemId: 'tabs1',
                maintainFlex: true,
                bodyPadding: '',
                animCollapse: false,
                collapseFirst: false,
                collapsed: false,
                collapsible: true,
                frameHeader: false,
                title: 'Замовлення',
                titleCollapse: true,
                pollForChanges: true,
                paramsAsHash: true,
                standardSubmit: true,
                trackResetOnLoad: true,
                items: [
				{
                        xtype: 'gridpanel',
                        id: "orders",
						height: 400,
                        bodyBorder: true,
                        frameHeader: false,
                        store: CurrentStore,
						selModel: Ext.create('Ext.selection.CheckboxModel', {mode:'Single' }),
                        columnLines: true,
                        features: [filters],
                        		columns: [
                            {
                                xtype: 'gridcolumn',
								width: 50,
								//width: 41,
                                autoRender: true,
                                layout: {
                                    type: 'fit'
                                },
                                dataIndex: 'order_id',
                                text: 'Номер',
								filtrable:true,
								renderer: GreenGrtayColor
                            },
                            {
                                xtype: 'gridcolumn',
								width: 150,
								//width: 41,
                                dataIndex: 'date',
                                text: 'Дата замовлення',
								renderer: GreenGrtayColor
                            },
                            {
                                xtype: 'gridcolumn',
								width: 150,
								//width: 41,
                                dataIndex: 'name1',
                                text: 'Ім\'я',
								renderer: GreenGrtayColor
                            },
                            {
                                xtype: 'gridcolumn',
								width: 150,
                                dataIndex: 'name2',
                                text: 'Прізвище',
								renderer: GreenGrtayColor
                            },
                            {
                                xtype: 'gridcolumn',
								width: 150,
                                dataIndex: 'surname',
                                text: 'По-батькові',
								renderer: GreenGrtayColor
                            },
                            {
                                xtype: 'gridcolumn',
								width: 100,
                                dataIndex: 'email',
                                text: 'Електронна Пошта',
								renderer: GreenGrtayColor
                            },
                            {
                                xtype: 'gridcolumn',
								width: 100,
                                dataIndex: 'idcard',
                                text: 'Номер читацького/Студентського',
								renderer: GreenGrtayColor
                            },
							{
                                xtype: 'gridcolumn',
								width: 100,
                                dataIndex: 'notes',
                                text: 'Примітка',
								renderer: GreenGrtayColor
                            },
							{
                                xtype: 'gridcolumn',
								width: 100,
                                dataIndex: 'status',
                                text: 'Статус',
								renderer: GreenGrtayColor
                            },
							{
                                xtype: 'gridcolumn',
								width: 150,
                                dataIndex: 'isdeleted',
                                text: 'видалено',
								//renderer: GreenGrtayColor
								renderer: function(v, params, record) 	{ 
									if (record.data.isdeleted == '1') {  var vydaleno = 'так'};
									if (record.data.isdeleted == '0') {  var vydaleno = 'ні'};
									//return '<span style="color:blue;">'+ vydaleno + '</span>';
									return vydaleno;
								}
                            }
                          ],

						 listeners: {
							selectionchange: function(model, records) {
								if (records[0]) {
									Ext.getCmp('del_order').setDisabled(false)
									var orderedGrid = Ext.getCmp('ordered').getView();
									var order_id = records[0].raw.order_id;
									orderedGrid.getStore().load({ params:{order_id: order_id} });
								}
							}
						},
						
                        viewConfig: {
                            width: 2000
                        },
						 dockedItems: [
							{
                                xtype: 'toolbar',
								id: 'toolbarTopOrders',
                                dock: 'top',
                                items: [ 
								
								{
                                xtype: 'combobox',
                                id: 'books_tatus_toolbar',
                                name: 'books_tatus_toolbar',
                                emptyText: 'Статус',
								editable: false,
                                displayField: 'order_status',
								fieldLabel: 'Статус',
                                queryMode: 'local',
                                store: 'orders_statuses',
                                valueField: 'order_status_id',
								listeners: {
								select: {
									fn:function(combo, value) 
									{
										switch (combo.value)
									{
									
								case "0":
								//CurrentStore = ordersAll;
								CurrentStore = Ext.getStore('ordersAll');
									Ext.getCmp('orders').view.store = CurrentStore;
									Ext.getCmp('orders').view.refresh();
									Ext.getCmp("pagingtoolbarOrders").bind("ordersAll");
									Ext.getCmp("pagingtoolbarOrders").doRefresh();
									//Ext.getCmp('vydaty').setDisabled(false)
									//Ext.getCmp('info').setDisabled(false)
									break;
								case "1":
								//CurrentStore = ordersNew;
								CurrentStore = Ext.getStore('ordersNew');
									Ext.getCmp('orders').view.store = CurrentStore;
									Ext.getCmp('orders').view.refresh();
									Ext.getCmp("pagingtoolbarOrders").bind("ordersNew");
									Ext.getCmp("pagingtoolbarOrders").doRefresh();
									//Ext.getCmp('vydaty').setDisabled(true)
									//Ext.getCmp('info').setDisabled(true)
									break;
								case "2":
								//CurrentStore = ordersArchieved;
								CurrentStore = Ext.getStore('ordersArchieved');
									Ext.getCmp('orders').view.store = CurrentStore;
									Ext.getCmp('orders').view.refresh();
									Ext.getCmp("pagingtoolbarOrders").bind("ordersArchieved");
									Ext.getCmp("pagingtoolbarOrders").doRefresh();
									//Ext.getCmp('vydaty').setDisabled(true)
									//Ext.getCmp('info').setDisabled(true)
									break;
								case "3":
								//CurrentStore = ordersDeleted;
								CurrentStore = Ext.getStore('ordersDeleted');
									Ext.getCmp('orders').view.store = CurrentStore;
									Ext.getCmp('orders').view.refresh();
									Ext.getCmp("pagingtoolbarOrders").bind("ordersDeleted");
									Ext.getCmp("pagingtoolbarOrders").doRefresh();
									////Ext.getCmp('vydaty').setDisabled(true)
									//Ext.getCmp('info').setDisabled(true)
									break;
								case "4":
								

								//CurrentStore = ordersDone;
								CurrentStore = Ext.getStore('ordersDone');
									Ext.getCmp('orders').view.store = CurrentStore;
									Ext.getCmp('orders').view.refresh();
									Ext.getCmp("pagingtoolbarOrders").bind("ordersDone");
									Ext.getCmp("pagingtoolbarOrders").doRefresh();
									////Ext.getCmp('vydaty').setDisabled(true)
									//Ext.getCmp('info').setDisabled(true)
									break;
									};
									}
								}
								}
                            },
							{
								xtype: 'button',
								disabled: true,
								id: 'del_order',
								text: 'Видалити замовлення',
								iconCls: 'remove',
								
								handler : function(){
									Ext.Msg.confirm('Підтвердження', 'Дійсно хочете видалити поточне замовлення?',
										function(btn){
											if(btn == 'yes'){
											RemoveOrder();
											}
										}
									);
								}
							},
							{
									xtype: 'button',
									id: 'add',
									text: 'Виконати',
									iconCls: 'add',
									handler : function(){
									MakeDone();
									}
							}
								
							]
                            },
							{
                                xtype: 'pagingtoolbar',
								pageSize: 20,
								id: 'pagingtoolbarOrders',
                                afterPageText: 'із {0}',
                                beforePageText: 'Сторінка',
                                displayInfo: true,
                                displayMsg: 'Показано {0} - {1} із {2}',
                                emptyMsg: 'Записи відсутні',
                                firstText: 'Перша сторінка',
                                lastText: 'Остання сторінка',
                                nextText: 'Наступна сторінка',
                                prependButtons: true,
                                prevText: 'Попередня сторінка',
                                refreshText: 'Оновити',
								store: CurrentStore,
                                dock: 'bottom'
                            }
                        ]
				
                    }
                    
                ]
            },
			
			
			
			
			{
                xtype: 'form',
                autoRender: true,
                autoShow: true,
                frame: false,
                //height: 750,
                id: 'tabs2',
                itemId: 'tabs2',
                maintainFlex: true,
                bodyPadding: '',
                animCollapse: false,
                collapseFirst: false,
                collapsed: false,
                collapsible: true,
                frameHeader: false,
                title: 'Книги поточного замовлення',
                titleCollapse: true,
                pollForChanges: true,
                paramsAsHash: true,
                standardSubmit: true,
                trackResetOnLoad: true,
                items: [
                    {
                        xtype: 'gridpanel',
                        id: 'ordered',
						height: 400,
                        bodyBorder: true,
                        frameHeader: false,
                        store: 'ordered',
						selModel: Ext.create('Ext.selection.CheckboxModel', { }),
                        columnLines: true,
                        features: [filters],
                        		columns: [
                            {
                                xtype: 'gridcolumn',
								width: 50,
                                autoRender: true,
                                layout: {
                                    type: 'fit'
                                },
                                dataIndex: 'id',
                                text: 'Номер',
								filtrable:true,
								renderer: GreenGrtayColor
                            },
                            {
                                xtype: 'gridcolumn',
								width: 150,
                                dataIndex: 'order_id',
                                text: 'order_id',
								renderer: GreenGrtayColor
                            },
							{
                                xtype: 'gridcolumn',
								width: 150,
                                dataIndex: 'book_id',
                                text: 'book_id',
								renderer: GreenGrtayColor
                            },
							{
                                xtype: 'gridcolumn',
								width: 150,
                                dataIndex: 'book_name',
                                text: 'Назва Книги',
								renderer: GreenGrtayColor
                            },
							{
                                xtype: 'gridcolumn',
								width: 150,
                                dataIndex: 'book_outhor',
                                text: 'Автор',
								renderer: GreenGrtayColor
                            },
							{
                                xtype: 'gridcolumn',
								width: 150,
                                dataIndex: 'year',
                                text: 'Рік',
								renderer: GreenGrtayColor
                            },
							{
                                xtype: 'gridcolumn',
								width: 150,
                                dataIndex: 'publisher',
                                text: 'Видавець',
								renderer: GreenGrtayColor
                            },
							{
                                xtype: 'gridcolumn',
								width: 150,
                                dataIndex: 'isdeleted',
                                text: 'видалено',
								renderer: function(v, params, record) 	{ 
									if (record.data.isdeleted == '1') {  var vydaleno = 'так'};
									if (record.data.isdeleted == '0') {  var vydaleno = 'ні'};
									//return '<span style="color:blue;">'+ vydaleno + '</span>';
									return vydaleno;
								}
                            }
                          ],

						  listeners: {
							selectionchange: function(model, records) {
								if (records[0]) {
									Ext.getCmp('del_ordered').setDisabled(false)
									
								}
							}
						},
                        viewConfig: {
                            width: 2000
                        },
						 dockedItems: [
							{
							xtype: 'toolbar',
							id: 'toolbarTopOrdered',
							dock: 'top',
							items: [ 
							{
								xtype: 'button',
								disabled: true,
								id: 'del_ordered',
								text: 'Видалити книги',
								iconCls: 'remove',
								
								handler : function(){
									Ext.Msg.confirm('Підтвердження', 'Дійсно хочете видалити книги з поточного замовлення?',
										function(btn){
											if(btn == 'yes'){
											RemoveOrdered();
											}
										}
									);
								}
								
							}
							]
                            },
							{
                                xtype: 'pagingtoolbar',
								pageSize: 20,
								id: 'pagingtoolbarOrdered',
                                afterPageText: 'із {0}',
                                beforePageText: 'Сторінка',
                                displayInfo: true,
                                displayMsg: 'Показано {0} - {1} із {2}',
                                emptyMsg: 'Записи відсутні',
                                firstText: 'Перша сторінка',
                                lastText: 'Остання сторінка',
                                nextText: 'Наступна сторінка',
                                prependButtons: true,
                                prevText: 'Попередня сторінка',
                                refreshText: 'Оновити',
								store: 'ordered',
                                dock: 'bottom'
                            }
                        ]
				
                    }
                ]
            }
        ];
        me.callParent(arguments);
    }
});


function RemoveOrder(){
var MyGrid = Ext.getCmp('orders').getView();
var selection =  Ext.getCmp('orders').getSelectionModel().selected;
var Slenght = selection.length;

	if(Slenght > 0) {
		
		for (var i=0 ; i<Slenght; i++)
		{
			var order_id = selection.items[i].data.order_id;
			Ext.Ajax.request({
				url:'/php/delete_order.php', //php function that saves the data
				params: {order_id: order_id},
				success:function(responce, action) {
					MyGrid.getStore().load();
				},
				failure: function(form, action) {
					alert('Помилка при виделенні');
				}
			});
		}
		MyGrid.getStore().load();	
	}
}
	
function MakeDone(){
	var MyGrid = Ext.getCmp('orders').getView();
	var cr = Ext.getCmp('orders').getSelectionModel().selected;
	var order_id = cr.items[0].data.order_id;
	Ext.Ajax.request({
		url:'/php/makedone.php',
		params: {order_id: order_id},
		success:function(responce, action) {
			MyGrid.getStore().load();
		},
		failure: function(form, action) {
			//alert('Помилка при виделенні');
		}
	});
}	
	
	
	
	
	
	
function RemoveOrdered(){
	var MyGrid = Ext.getCmp('ordered').getView();
	var selection = Ext.getCmp('ordered').getSelectionModel().selected;
	var Slenght = selection.length;
	if(Slenght > 0) {
		
		for (var i=0 ; i<Slenght; i++)
		{
		var id = selection.items[i].data.id;
		Ext.Ajax.request({
			url:'/php/delete_ordered.php', 
			params: {id: id},
			success:function(responce, action) {
				MyGrid.getStore().load();
			},
			failure: function(form, action) {
				alert('Помилка при виделенні');
			}
		});
		}
		MyGrid.getStore().load();	
	}

}



function GreenGrtayColor (v, params, record) { 
	
	if(record.data.status	 == 'Нове') { 
		var color = 'blue'; 
		var dekor =  'none';
	};
	
	if(record.data.status	 == 'Виконане') { 
		var color = 'green'; 
		var dekor =  'none';
	};
	
	if(record.data.status	 == 'Видалене') { 
		var color = 'black'; 
		var dekor =  'line-through';
	};
	
	return '<span style="color:' + color + ';text-decoration:' + dekor + '">' + v + '</span>';
}


	
						