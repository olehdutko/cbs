/*
 * File: app/view/ui/books_history.js
 * Date: Mon Sep 12 2011 16:32:25 GMT+0300 (FLE Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.0.
 * http://www.sencha.com/products/designer/
 *
 * This file will be auto-generated each and everytime you export.
 *
 * Do NOT hand edit this file.
 */
Ext.Loader.setConfig({enabled: true});
Ext.grid.RowEditor.prototype.cancelBtnText = "&#1042;&#1110;&#1076;&#1084;&#1110;&#1085;&#1080;&#1090;&#1080;";
Ext.grid.RowEditor.prototype.saveBtnText = "&#1047;&#1073;&#1077;&#1088;&#1077;&#1075;&#1090;&#1080;";
Ext.grid.RowEditor = new Ext.grid.RowEditor();
Ext.Loader.setPath('Ext.ux', '/ext-4.0.2a/examples/ux');
Ext.require([
    //'Ext.grid.*',
    //'Ext.data.*',
    'Ext.ux.grid.FiltersFeature',
    'Ext.toolbar.Paging'
]);

 var url = {
        local:  'grid-filter.json',  
        remote: 'grid-filter.php'
    };

    var encode = false;
    var local = false;
	
	 Ext.define('Product', {
    extend: 'Ext.data.Model',
    fields: [ 
			{ type: 'int', name: 'id' },
			{ type: 'date',name: 'timestamp' },
			{ type: 'int', name: 'book_id' },
			//{ type: 'string', name: 'bookname' },
			{ type: 'int', name: 'readerid' },
			//{ type: 'string', name: 'readername' },
			{ type: 'string',name: 'operation' }
			]
});

	
var GridName = "books_history" 
	
    var filters = {
        ftype: 'filters',
        encode: encode, 
        local: local,   

        filters: [
			{ type: 'int', dataIndex: 'id' },
			{ type: 'date',dataIndex: 'timestamp' },
			{ type: 'int', dataIndex: 'book_id' },
			//{ type: 'string', dataIndex: 'bookname' },
			{ type: 'int', dataIndex: 'readerid' },
			//{ type: 'string', dataIndex: 'readername' },
			{ type: 'string',dataIndex: 'operation' }
        ]
    };

books_history = Ext.create('Ext.data.JsonStore', {
	autoLoad: true,
	 pageSize: 20,
            autoSync: true,
            storeId: 'books_history',
            proxy: {
                type: 'ajax',
                url: './php/books_history.php',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
			{ name: 'id' },
			{ name: 'timestamp' },
			{ name: 'book_id' },
			//{ name: 'bookname' },
			{ name: 'readerid' },
			//{ name: 'readername' },
			{ name: 'operation' },


            ]
    });

	
	CurrentStore = 'books_history';

Ext.define('Borsuko.view.ui.books_history', {
    extend: 'Ext.panel.Panel',


    initComponent: function() {
        var me = this;
        me.items = [
            {
                xtype: 'form',
                autoRender: true,
                autoShow: true,
                frame: true,
                height: 750,
                id: 'tabs',
                itemId: 'tabs',
                maintainFlex: true,
                bodyPadding: '',
                animCollapse: false,
                collapseFirst: false,
                collapsed: false,
                collapsible: true,
                frameHeader: false,
                title: '&#1030;&#1089;&#1090;&#1086;&#1088;&#1110;&#1103; &#1050;&#1085;&#1080;&#1078;&#1086;&#1082;',
                titleCollapse: true,
                pollForChanges: true,
                paramsAsHash: true,
                standardSubmit: true,
                trackResetOnLoad: true,
                items: [

                    {
                        xtype: 'gridpanel',
                        id: GridName,
						height: 500,
                        //toFrontOnShow: false,
                        //suspendLayout: true,
                        bodyBorder: true,
                        frameHeader: false,
                        //forceFit: true,
                        store: CurrentStore,
						selModel: Ext.create('Ext.selection.RowModel', {
                            allowDeselect: true
                        }),

                        columnLines: true,
                        features: [filters],
                        		columns: [
                            {
                                xtype: 'gridcolumn',
								width: 50,
								//width: 41,
                                autoRender: true,
                                layout: {
                                    type: 'fit'
                                },
                                dataIndex: 'id',
                                text: '&#1053;&#1086;&#1084;&#1077;&#1088;',
								filtrable:true,
								renderer: GreenGrtayColor
                            },
							 {
                                xtype: 'gridcolumn',
								width: 150,
								//width: 41,
                                dataIndex: 'timestamp',
                                text: '&#1063;&#1072;&#1089; &#1086;&#1087;&#1077;&#1088;&#1072;&#1094;&#1110;&#1111;',
                                field: {
                                    xtype: 'textfield'
                                    
                                },
								renderer: GreenGrtayColor
                            },
                            {
                                xtype: 'gridcolumn',
								width: 150,
								//width: 41,
                                dataIndex: 'book_id',
                                text: '&#1053;&#1086;&#1084;&#1077;&#1088; &#1082;&#1085;&#1080;&#1078;&#1082;&#1080;',
                                field: {
                                    xtype: 'textfield'
                                    
                                },
								renderer: GreenGrtayColor
                            },
                            {
                                xtype: 'gridcolumn',
								width: 150,
								//width: 41,
                                dataIndex: 'readerid',
                                text: '&#1050;&#1074;&#1080;&#1090;&#1086;&#1082; &#1063;&#1080;&#1090;&#1072;&#1095;&#1072;',
                                field: {
                                    xtype: 'textfield'
                                    
                                },
								renderer: GreenGrtayColor
                            },
                            {
                                xtype: 'gridcolumn',
								width: 150,
                                dataIndex: 'operation',
                                text: '&#1054;&#1087;&#1077;&#1088;&#1072;&#1094;&#1110;&#1103; &#1085;&#1072;&#1076; &#1082;&#1085;&#1080;&#1075;&#1086;&#1102;',
								field: {
                                    xtype: 'textfield'
                                    
                                },
								renderer: GreenGrtayColor
                            }
                            
                          ],
						  listeners: {
							  selectionchange: function(model, records) {
								if (records[0]) {
									Ext.getCmp('info').setDisabled(false)
									Ext.getCmp('vydaty').setDisabled(false)
								}
							}
							/*itemclick: function(model, records) {

								Ext.getCmp('info').setDisabled(false)
								Ext.getCmp('vydaty').setDisabled(false)
							}*/
						},

						  
                        viewConfig: {
                            width: 2000
                        },
						 dockedItems: [
                            {
                                xtype: 'toolbar',
								id: 'toolbarTop',
                                dock: 'top',
                                items: []
                            },
							
							{
                                xtype: 'pagingtoolbar',
								pageSize: 20,
								id: 'pagingtoolbar',
                                afterPageText: '&#1110;&#1079; {0}',
                                beforePageText: '&#1057;&#1090;&#1086;&#1088;&#1110;&#1085;&#1082;&#1072;',
                                displayInfo: true,
                                displayMsg: '&#1055;&#1086;&#1082;&#1072;&#1079;&#1072;&#1085;&#1086; {0} - {1} &#1110;&#1079; {2}',
                                emptyMsg: '&#1047;&#1072;&#1087;&#1080;&#1089;&#1080; &#1074;&#1110;&#1076;&#1089;&#1091;&#1090;&#1085;&#1110;',
                                firstText: '&#1055;&#1077;&#1088;&#1096;&#1072; &#1089;&#1090;&#1086;&#1088;&#1110;&#1085;&#1082;&#1072;',
                                lastText: '&#1054;&#1089;&#1090;&#1072;&#1085;&#1085;&#1103; &#1089;&#1090;&#1086;&#1088;&#1110;&#1085;&#1082;&#1072;',
                                nextText: '&#1053;&#1072;&#1089;&#1090;&#1091;&#1087;&#1085;&#1072; &#1089;&#1090;&#1086;&#1088;&#1110;&#1085;&#1082;&#1072;',
                                prependButtons: true,
                                prevText: '&#1055;&#1086;&#1087;&#1077;&#1088;&#1077;&#1076;&#1085;&#1103; &#1089;&#1090;&#1086;&#1088;&#1110;&#1085;&#1082;&#1072;',
                                refreshText: '&#1054;&#1085;&#1086;&#1074;&#1080;&#1090;&#1080;',
								store: CurrentStore,
                                dock: 'bottom'
                            }
                        ]
						
						
                       
                        						
                    }
                ]
            }
        ];
        me.callParent(arguments);
    }
});





	function GreenGrtayColor (v, params, record) { 
		//var value = record.data.nomer;
			if(record.data.operation == '&#1042;&#1080;&#1076;&#1072;&#1085;&#1086; &#1085;&#1072; &#1088;&#1091;&#1082;&#1080;') { 
			var dekor =  'none';
			var color = 'green';
		};
		
		if(record.data.operation	 == '&#1042;&#1080;&#1076;&#1072;&#1085;&#1086; &#1074; &#1079;&#1072;&#1083;') { 
			var color = 'blue'; 
			var dekor =  'none';
		};
		
		if(record.data.operation	 == '&#1042;&#1090;&#1088;&#1072;&#1095;&#1077;&#1085;&#1086;') { 
			var color = 'black'; 
			var dekor =  'line-through';
		};
		return '<span style="color:' + color + ';text-decoration:' + dekor + '">' + v + '</span>';
	}
	
	function getCount(){
	var jsonObj = { };
	  var MyGrid = Ext.getCmp(GridName).getView();
	  var ColumnSizeArray=new Array(); 
	  var ColumnVisibleArray=new Array(); 
	  var columns = MyGrid.getGridColumns();
	  var columnsLength = MyGrid.getGridColumns().length;
	  var columnsState = MyGrid.getHeaderCt().getGridColumns();
	  for(var i = 0; i < columnsLength; i++){
			ColumnSizeArray[i]=MyGrid.getHeaderAtIndex(i).el.dom.firstChild.scrollWidth;
			jsonObj[ColumnSizeArray[i].id] = ColumnSizeArray[i].value;
			ColumnVisibleArray[i]=columnsState[i].hidden;
	  }	

		var JsonColumnSize = array1dToJson(ColumnSizeArray, 'data', 'size');
		var JsonColumnVisible = array1dToJson(ColumnVisibleArray, 'data', 'hidden');
  
		Ext.Ajax.request(
				{
					url: './php/SaveColumnSize.php',
					params: {
						GridName: GridName,
						JsonColumnSize: JsonColumnSize,
						JsonColumnVisible: JsonColumnVisible
						
					},
					success: function()
					{
					Ext.MessageBox.alert('&#1042;&#1080;&#1082;&#1086;&#1085;&#1072;&#1085;&#1086;', '&#1057;&#1090;&#1072;&#1085; &#1082;&#1086;&#1083;&#1086;&#1085;&#1086;&#1082; &#1091;&#1089;&#1087;&#1110;&#1096;&#1085;&#1086; &#1079;&#1073;&#1077;&#1088;&#1077;&#1078;&#1077;&#1085;&#1080;&#1081;');
					},
					failure: function(response)
					{
						Ext.MessageBox.alert('&#1055;&#1086;&#1084;&#1080;&#1083;&#1082;&#1072;', '&#1053;&#1077;&#1084;&#1086;&#1078;&#1083;&#1080;&#1074;&#1086; &#1076;&#1086;&#1089;&#1090;&#1091;&#1087;&#1080;&#1090;&#1080;&#1089;&#1103; &#1076;&#1086; &#1073;&#1072;&#1079;&#1080; &#1076;&#1072;&#1085;&#1080;&#1093;');
					}
				})
		
		/*function array2dToJson(a, p, nl) {
		  var i, j, s = '{"' + p + '":[';
		  nl = nl || '';
		  for (i = 0; i < a.length; ++i) {
			s += nl + array1dToJson(a[i]);
			if (i < a.length - 1) {
			  s += ',';
			}
		  }
		  s += nl + ']}';
		  return s;
		}*/
		
		function array1dToJson(a, p, value) {
		  var i, s = '[';
		  for (i = 0; i < a.length; ++i) {
			if (typeof a[i] == 'string') {
			  s += '"' + a[i] + '"';
			}
			else { // assume number type
			  s += "{\""+value+"\": "+a[i]+"}";
			}
			if (i < a.length - 1) {
			  s += ',';
			}
		  }
		  s += ']';
		  if (p) {
			return '{"' + p + '":' + s + '}';
		  }
		  return s;
		}
}

 ColumnSizeStore = Ext.create('Ext.data.JsonStore', {
	autoLoad: true,
	autoSync: true,
	storeId: 'ColumnSizeStore',
	proxy: {
		type: 'ajax',
		url: './php/SelectColumnSize.php?GridName='+GridName,
		reader: {
			type: 'json',
			root: 'data'
		}
	},
	fields: [
		{
			name: 'size'
		}
	],
	listeners: {
				load: function() {
					
					var StoreLength = ColumnSizeStore.data.length;
					for(var i = 0; i < StoreLength; i++){
					//ColumnSizes[i] = ColumnSizeStore.data.items[i].data.size;
					Ext.getCmp(GridName).columns[i].setWidth(ColumnSizeStore.data.items[i].data.size);
					};
				}
			}
});	

ColumnStateStore = Ext.create('Ext.data.JsonStore', {

	autoLoad: true,
	autoSync: true,
	storeId: 'ColumnStateStore',
	proxy: {
		type: 'ajax',
		url: './php/SelectColumnState.php?GridName='+GridName,
		reader: {
			type: 'json',
			root: 'data'
		}
	},
	fields: [
		{
			name: 'hidden'
		}
	],
	listeners: {
				load: function() {
					var StoreLength1 = ColumnStateStore.data.length;
					for(var i = 0; i < StoreLength1; i++){
					//ColumnSizes[i] = ColumnStateStore.data.items[i].data.hidden;
					Ext.getCmp(GridName).columns[i].setVisible(!(ColumnStateStore.data.items[i].data.hidden));//&#1087;&#1088;&#1072;&#1094;&#1102;&#1108; &#1085;&#1072; FF, &#1072;&#1083;&#1077; &#1085;&#1077; &#1085;&#1072; IE
					};
				}
			}
});

var userid = new Ext.form.TextField({
	allowBlank : false,
	//format : "d/m/Y",
	fieldLabel:'&#8470; &#1050;&#1074;&#1080;&#1090;&#1082;&#1072;',
	name:'userid',
	anchor:'100%',
	emptyText:'&#1053;&#1086;&#1084;&#1077;&#1088; &#1050;&#1074;&#1080;&#1090;&#1082;&#1072;',
	id:"userid"
});

function showDialogForm() {
        if (!win) {
            var form = Ext.widget('form', {
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                border: false,
				id: 'form',
                bodyPadding: 10,

                fieldDefaults: {
                    labelAlign: 'top',
                    labelWidth: 100,
                    labelStyle: 'font-weight:bold'
                },
                defaults: {
                    margins: '0 0 10 0'
                },

                items: [userid],

                buttons: [{
                    text: '&#1042;&#1110;&#1076;&#1084;&#1110;&#1085;&#1080;&#1090;&#1080;',
                    handler: function() {
						idcard = Ext.getCmp("userid").getValue();
						//form.getForm().reset();
                        //this.up('window').hide();
                    }
                }, 
				{
					text: '&#1042;&#1080;&#1076;&#1072;&#1090;&#1080; &#1082;&#1085;&#1080;&#1075;&#1091; &#1085;&#1072; &#1088;&#1091;&#1082;&#1080;',
					handler: function() {
						if (this.up('form').getForm().isValid()) {
							idcard = Ext.getCmp("userid").getValue();
							var bookid = Ext.getCmp(GridName).getSelectionModel().selected.items[0].raw.id;
							if (checker(idcard) > 0) {
								naruky(idcard, bookid);
								form.getForm().reset();
								win.hide();
								Ext.MessageBox.alert('&#1043;&#1086;&#1090;&#1086;&#1074;&#1086;!', '&#1050;&#1085;&#1080;&#1075;&#1072; &#1074;&#1080;&#1076;&#1072;&#1085;&#1072; &#1085;&#1072; &#1088;&#1091;&#1082;&#1080;!');
							}
							else{
								unregisteredReader(idcard);
							}
						}
					}
                },
				{
                    text: '&#1042;&#1080;&#1076;&#1072;&#1090;&#1080; &#1082;&#1085;&#1080;&#1075;&#1091; &#1074; &#1079;&#1072;&#1083;',
					handler: function() {
						if (this.up('form').getForm().isValid()) {
							idcard = Ext.getCmp("userid").getValue();
							var bookid = Ext.getCmp(GridName).getSelectionModel().selected.items[0].raw.id;
							if (checker(idcard) > 0) {
								vzal(idcard, bookid);
								form.getForm().reset();
								win.hide();
								Ext.MessageBox.alert('&#1043;&#1086;&#1090;&#1086;&#1074;&#1086;!', '&#1050;&#1085;&#1080;&#1075;&#1072; &#1074;&#1080;&#1076;&#1072;&#1085;&#1072; &#1074; &#1095;&#1080;&#1090;&#1072;&#1094;&#1100;&#1082;&#1080;&#1081; &#1079;&#1072;&#1083;!');
							}
							else{
								unregisteredReader(idcard);
							}
						}
					}
                }
				]
            });

            win = Ext.widget('window', {
                title: '&#1042;&#1080;&#1076;&#1072;&#1095;&#1072; &#1082;&#1085;&#1080;&#1075;&#1080;',
                closeAction: 'hide',
                width: 400,
                height: 400,
                minHeight: 400,
                layout: 'fit',
                resizable: true,
                modal: true,
                items: form
            });
        }
        win.show();
    }
function checker(stridcard) {
	var resp;
	Ext.Ajax.request(
	{
		url: './php/check_visitor.php',
		async   : false,
		params: {
				idcard: stridcard
		},
		callback: function(options, success, response) {
			resp = JSON.parse(response.responseText).total;
		},
		success: function() 
		{
			
		},
		failure: function(response)
		{
			Ext.MessageBox.alert('&#1055;&#1086;&#1084;&#1080;&#1083;&#1082;&#1072;', '&#1053;&#1077;&#1084;&#1086;&#1078;&#1083;&#1080;&#1074;&#1086; &#1076;&#1086;&#1089;&#1090;&#1091;&#1087;&#1080;&#1090;&#1080;&#1089;&#1103; &#1076;&#1086; &#1073;&#1072;&#1079;&#1080; &#1076;&#1072;&#1085;&#1080;&#1093;');
		}
	})	
	
	return resp;
						
}
function naruky(stridcard, bookid) {
	
	//var id = Ext.getCmp(GridName).getSelectionModel().selected.items[0].raw.id;
	Ext.Ajax.request({
	   url:'./php/naruky.php', 
		params: {
			userid:stridcard,
			id: bookid
			},
		success:function(responce, action) {
			var MyGrid = Ext.getCmp(GridName).getView();
			MyGrid.getStore().load();
		},
		failure: function(form, action) {
			Ext.MessageBox.alert('&#1055;&#1086;&#1084;&#1080;&#1083;&#1082;&#1072;!', '&#1053;&#1077; &#1084;&#1086;&#1078;&#1091; &#1076;&#1086;&#1089;&#1090;&#1091;&#1087;&#1080;&#1090;&#1080;&#1089;&#1103; &#1076;&#1086; &#1073;&#1072;&#1079;&#1080; &#1076;&#1072;&#1085;&#1085;&#1080;&#1093;!');
		}
	}); 
}
function vzal(stridcard, bookid) {

	Ext.Ajax.request({
	url:'./php/vzal.php', 
	params: {
		userid:stridcard,
		id: bookid
		},
	success:function(responce, action) {
		var MyGrid = Ext.getCmp(GridName).getView();
		MyGrid.getStore().load();
	},
	failure: function(form, action) {
		Ext.MessageBox.alert('&#1055;&#1086;&#1084;&#1080;&#1083;&#1082;&#1072;!', '&#1053;&#1077; &#1084;&#1086;&#1078;&#1091; &#1076;&#1086;&#1089;&#1090;&#1091;&#1087;&#1080;&#1090;&#1080;&#1089;&#1103; &#1076;&#1086; &#1073;&#1072;&#1079;&#1080; &#1076;&#1072;&#1085;&#1085;&#1080;&#1093;!');
	}
	}); 
	
}

function unregisteredReader(idcard) {
	Ext.Msg.confirm('&#1085;&#1077;&#1079;&#1072;&#1088;&#1077;&#1108;&#1089;&#1090;&#1088;&#1086;&#1074;&#1072;&#1085;&#1080;&#1081; &#1095;&#1080;&#1090;&#1072;&#1095;', '&#1063;&#1080;&#1090;&#1072;&#1095;&#1072; &#1079; &#1085;&#1086;&#1084;&#1077;&#1088;&#1086;&#1084; &#1095;&#1080;&#1090;&#1072;&#1094;&#1100;&#1082;&#1086;&#1075;&#1086; &#1082;&#1074;&#1080;&#1090;&#1082;&#1072; "'+idcard+'" &#1074; &#1073;&#1072;&#1079;&#1110; &#1085;&#1077; &#1079;&#1085;&#1072;&#1081;&#1076;&#1077;&#1085;&#1086;. &#1047;&#1072;&#1088;&#1077;&#1108;&#1089;&#1090;&#1088;&#1091;&#1074;&#1072;&#1090;&#1080; &#1085;&#1086;&#1074;&#1086;&#1075;&#1086; &#1082;&#1086;&#1088;&#1080;&#1089;&#1090;&#1091;&#1074;&#1072;&#1095;&#1072;?');
	/*function(btn){
		if(btn == 'yes'){
		strUrl = "/add_reader.php";
		window.location = strUrl;
		}
	}*/
	
}

 function unregisteredReader(idcard){ 
	Ext.Msg.confirm('&#1085;&#1077;&#1079;&#1072;&#1088;&#1077;&#1108;&#1089;&#1090;&#1088;&#1086;&#1074;&#1072;&#1085;&#1080;&#1081; &#1095;&#1080;&#1090;&#1072;&#1095;', '&#1063;&#1080;&#1090;&#1072;&#1095;&#1072; &#1079; &#1085;&#1086;&#1084;&#1077;&#1088;&#1086;&#1084; &#1095;&#1080;&#1090;&#1072;&#1094;&#1100;&#1082;&#1086;&#1075;&#1086; &#1082;&#1074;&#1080;&#1090;&#1082;&#1072; "'+idcard+'" &#1074; &#1073;&#1072;&#1079;&#1110; &#1085;&#1077; &#1079;&#1085;&#1072;&#1081;&#1076;&#1077;&#1085;&#1086;. &#1047;&#1072;&#1088;&#1077;&#1108;&#1089;&#1090;&#1088;&#1091;&#1074;&#1072;&#1090;&#1080; &#1085;&#1086;&#1074;&#1086;&#1075;&#1086; &#1082;&#1086;&#1088;&#1080;&#1089;&#1090;&#1091;&#1074;&#1072;&#1095;&#1072;?', function (btn, text) {
		if (btn == 'yes') {
			strUrl = "/add_reader.php?readerid="+idcard;
			window.location = strUrl;
		}
	});
}


	
						