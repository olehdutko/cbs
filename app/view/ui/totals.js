/*
 * File: app/view/ui/totals.js
 * Date: Fri Sep 16 2011 15:55:45 GMT+0300 (FLE Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.0.
 * http://www.sencha.com/products/designer/
 *
 * This file will be auto-generated each and everytime you export.
 *
 * Do NOT hand edit this file.
 */
var GridName = 'total_grid';
     var editor = new Ext.grid.plugin.CellEditing({
        saveText: 'Зберегти'
    });
	
var _comboData = [];	
_comboData.push(['Ціна', 1]);
_comboData.push(['Пропозиція', 1]);
var fm = Ext.form;
var MyRecord;
var strGrivna = 1; 
var strTotalCost = 1;
var strProp1 = 0;
var strTotalCost1 = 0;
var strGrivna = 1;
//var strTotalTime1 = 0;
	
var hash = getUrlVars();
function getUrlVars()
{
var vars = [], hash;
var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
for(var i = 0; i < hashes.length; i++)
{
hash = hashes[i].split('=');
vars.push(hash[0]);
vars[hash[0]] = hash[1];
}
return vars;
}
strObjid = hash['objid'];

	store_money = Ext.create('Ext.data.JsonStore', {
    storeId: 'store_money',
		autoLoad: true,
            proxy: {
                type: 'ajax',
				url:'/php/settings.php?action=showData', 
                reader: {
                    type: 'json',
                    root: 'results'
                }
            },
            fields: [
                {
                    name: 'dollar'
                },
                {
                    name: 'euro'
                }
            ],
			listeners: {
						load: function() {
						Ext.getCmp("dollar").setValue(store_money.data.items[0].data.dollar);
						Ext.getCmp("euro").setValue(store_money.data.items[0].data.euro);
						}
					}
    });
	
	
var dollar = Ext.create('Ext.form.TextField', {
	readOnly: true,
    labelAlign: 'right',
	fieldLabel:'Поточний Курс долару',
	width: 220,
	 labelWidth: 150,
	name:'nazva',
	id:"dollar"
}); 
var euro = Ext.create('Ext.form.TextField', {
	readOnly: true,
    labelAlign: 'right',
	fieldLabel:'Поточний Курс євро',
	width: 220,
	labelWidth: 150,
	name:'dollar',
	
	id:"euro"
}); 

var Dialog_Moment_Dollar = Ext.create('Ext.form.TextField', {
	labelAlign: 'right',
	id: 'Dialog_Moment_Dollar',
	width: 220,
	name: 'Dialog_Moment_Dollar',
	fieldLabel: 'Курс Доллару',
	labelWidth: 150
}); 

var Dialog_Moment_Euro = Ext.create('Ext.form.TextField', {
	labelAlign: 'right',
	id: 'Dialog_Moment_Euro',
	width: 220,
	name: 'Dialog_Moment_Euro',
	fieldLabel: 'Курс Євро',
	labelWidth: 150
}); 

				
var reader2 = new Ext.data.JsonReader({
		root: 'results',
        totalProperty: 'total',
        fields: [
			{name: 'euro', type: 'float'},
			{name: 'dollar', type: 'float'}
        ]
    });

	var SettingsForm =  Ext.create('Ext.FormPanel', {
		id: "SettingsForm",
		layout: 'table',
		frame: true,
		border: false,
		reader: reader2,
		width: 500,
		title:'Поточний курс валют',
		//hidden:false,
		draggable:false,
		resizible:false,
		collapsible: false,
		collapsed: false,
		maximizable : false,
		animCollapse: false,
		items:[dollar, euro]
			
    });
	
		var SettingsForm1 =  Ext.create('Ext.FormPanel', {
		id: "SettingsForm1",
		layout: 'table',
		frame: true,
		border: false,
		reader: reader2,
		width: 500,
		title:'Курс валют Об\'єкта',
		//hidden:false,
		draggable:false,
		resizible:false,
		collapsible: false,
		collapsed: false,
		maximizable : false,
		animCollapse: false,
		items:[Dialog_Moment_Dollar, Dialog_Moment_Euro]
			
    });

var getSelectedSumFn = function(v, record, field){
          result += record.data.Price;
        return result;
}

 TotalObjectStore1 = Ext.create('Ext.data.JsonStore', {
        storeId: 'TotalObjectStore1',
		autoLoad: true,
		groupField: 'zamovleniaID',
            proxy: {
                type: 'ajax',
                url: '/php/total.php?action=showData&objid='+strObjid,
                reader: {
                    type: 'json',
                    root: 'results'
                }
            },
            fields: [
                 {
                    type: 'int',
					name: 'nomer'
                }, 
				{
                    name: 'date'
                },
				{
                    name: 'nazva'
                },
				{
                    name: 'adresa'
                },
				{
                    name: 'Variant'
                },
                {
                    name: 'zamovleniaID'
                },
                {
                    name: 'type'
                },
                /*{
                    name: 'CategoryName'
                },
                {
                    name: 'SubCategoryName'
                },*/
                {
                    name: 'ModelId'
                },
                {
                    name: 'Model'
                },
                {
                    name: 'Count',
					type: 'int'
                },
                {
                    name: 'OdVymir'
                },
                {
                    name: 'Vendor'
                },
                {
                    name: 'Description'
                },
                /*{
					type: 'int',
                    name: 'Time'
                },
                {
					type: 'int',
                    name: 'TotalTime'
                },*/
                {	
					type: 'float',
                    name: 'Price'
                },
                {
					type: 'float',
                    name: 'PriceGrn'
                },
                {
					type: 'float',				
                    name: 'FinalPrice'
                },
                {
                    type: 'int',
					name: 'Nacinka'
                },
                {
                    name: 'PriceFor1'
                },
                {
					type: 'float',				
                    name: 'Propozycija'
                },
				{
					type: 'float',				
                    name: 'propozycija'
                },
				{
					type: 'float',				
                    name: 'suma'
                },
				{
					type: 'float',				
                    name: 'dohid'
                },
				
                {
					type: 'float',				
                    name: 'Dohid'
                },
                {
                    name: 'Valiuta'
                },
                {
                    name: 'Gryvni'
                },
                {
                    name: 'dollar'
                },
                {
                    name: 'euro'
                },
                {
                    name: 'Moment_Dollar'
                },
                {
                    name: 'Moment_Euro'
                }
            ],
			listeners: {
						load: function() {
						
						Ext.getCmp("nomer").setValue(TotalObjectStore1.data.items[0].data.nomer);
						Ext.getCmp("date").setValue(TotalObjectStore1.data.items[0].data.date);
						Ext.getCmp("nazva").setValue(TotalObjectStore1.data.items[0].data.nazva);
						Ext.getCmp("adresa").setValue(TotalObjectStore1.data.items[0].data.adresa);
						Ext.getCmp("Variant").setValue(TotalObjectStore1.data.items[0].data.Variant);
						
						Ext.getCmp("Moment_Dollar").setValue(TotalObjectStore1.data.items[0].data.Moment_Dollar);
						Ext.getCmp("Moment_Euro").setValue(TotalObjectStore1.data.items[0].data.Moment_Euro);
						
						Ext.getCmp("Propozycija").setValue(TotalObjectStore1.data.items[0].data.propozycija);
						Ext.getCmp("Suma").setValue(TotalObjectStore1.data.items[0].data.suma);
						Ext.getCmp("Dohid").setValue(TotalObjectStore1.data.items[0].data.dohid);
						}
					}
    });
	
	
	//function pctChange(val){ return '<span style="color:blue;">' + val + '%</span>';}
	function pctChange(val){ return '<span>' + val + '%</span>';}
	function green(val){ return '<span style="color:green;">' + val + '</span>';}	
/*
	Ext.ux.grid.GroupSummary.Calculations['Propozycija'] = function(v, record, field){
		record = Ext.getCmp(GridName).getStore().getAt(0);
		
		var pPrice = record.data.Price;
		var pCount = record.data.Count;
		var pDollar = record.data.Moment_Dollar;
		var pEuro = record.data.Moment_Euro;
		var pNacinka = record.data.Nacinka;
		var pPriceCount = pPrice * pCount;
		
		if (record.data.Valiuta	 == 'dollar') { strProp = v + (pCount * ((((pPrice * pDollar)*pNacinka)/100)+(pPrice * pDollar)).toFixed(2)) };
		if(record.data.Valiuta	 == 'grivna') { strProp = v + (pCount * ((((record.data.Price* strGrivna)*record.data.Nacinka)/100)+(record.data.Price* strGrivna)).toFixed(2)) };
		if(record.data.Valiuta	 == 'euro') { strProp = v + (pCount * ((((pPrice * pEuro)*pNacinka)/100)+(pPrice * pEuro)).toFixed(2)) };
		return "record";
    };
	Ext.ux.grid.GroupSummary.Calculations['Dohid'] = function(v, record, field){
	alert(v);

		var pPrice = record.data.Price;
		var pCount = record.data.Count;
		var pDollar = record.data.Moment_Dollar;
		var pEuro = record.data.Moment_Euro;
		var pNacinka = record.data.Nacinka;
		var pPriceCount = pPrice * pCount;
		
		if (record.data.Valiuta	 == 'dollar') { var strDohid = v + ((pCount * ((((pPrice * pDollar)*pNacinka)/100)+(pPrice * pDollar)).toFixed(2)) - (pCount * pPrice) * pDollar) };
		if (record.data.Valiuta	 == 'grivna') { var strDohid = v + ((pCount * ((((record.data.Price* strGrivna)*record.data.Nacinka)/100)+(record.data.Price* strGrivna)).toFixed(2)) - (pCount * pPrice) * strGrivna ) };
		if (record.data.Valiuta	 == 'euro') { var strDohid = v + ((pCount * ((((pPrice * pEuro)*pNacinka)/100)+(pPrice * pEuro)).toFixed(2)) - (pCount * pPrice) * pEuro) };
		return v;
    };
	Ext.ux.grid.GroupSummary.Calculations['PriceGrn'] = function(v, record, field){
		if (record.data.Valiuta	 == 'dollar') { var strPriceGrn = v + (record.data.Price) * record.data.Moment_Dollar };
		if(record.data.Valiuta	 == 'grivna') { var strPriceGrn = v + (record.data.Price) * strGrivna };
		if(record.data.Valiuta	 == 'euro') { var strPriceGrn = v + (record.data.Price) * record.data.Moment_Euro }; 		
		return strPriceGrn;
    };
	Ext.ux.grid.GroupSummary.Calculations['totalCost'] = function(value, record, field){
		record = Ext.getCmp(GridName).getStore().getAt(0);
		//alert(record.data);
		if (record.data.Valiuta	 == 'dollar') { value = value + ((record.data.Price * record.data.Count) *record.data.Moment_Dollar) };
		if(record.data.Valiuta	 == 'grivna') { value = value + ((record.data.Price * record.data.Count))*strGrivna };
		if(record.data.Valiuta	 == 'euro') { value = value + ((record.data.Price * record.data.Count))*record.data.Moment_Euro }; 		
		return "record.data";
		//return value;
    };
	Ext.ux.grid.GroupSummary.Calculations['TotalTime'] = function(v, record, field){
 		var strTotalTime1 = 0;
		var strTotalTime = 0;
		strTotalTime =  record.data.Count * record.data.Time;
		strTotalTime1  = strTotalTime1 + strTotalTime;
		return strTotalTime1;
		};
	*/
	

 StoreForPie = Ext.create('Ext.data.JsonStore', {
        storeId: 'StoreForPie',
		autoLoad: true,
            proxy: {
                type: 'ajax',
                url: '/php/types1.php?objid='+strObjid,
                reader: {
                    type: 'json',
                    root: 'results'
                }
            },
            fields: [
                {name: 'type'},{name: 'Propositia'}
            ]
    });
	
	
	ColumnChartStore1 = Ext.create('Ext.data.JsonStore', {

	autoLoad: true,
	autoSync: true,
	storeId: 'ColumnChartStore1',
	proxy: {
		type: 'ajax',
		url: './php/ColumnChart.php?objid='+strObjid,
		reader: {
			type: 'json',
			root: 'data'
		}
	},
	fields: [
                {
                    name: 'season'
                },
                {
                    name: 'total'
                }
            ]
	
});

/*
 ColumnChartStore1 = Ext.create('Ext.data.JsonStore', {
        storeId: 'ColumnChartStore1',
		autoLoad: true,
            storeId: 'ColumnChartStore1',
            proxy: {
                type: 'ajax',
                url: '/Json/ColumnChartStore.json',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
                {
                    name: 'season'
                },
                {
                    name: 'total'
                }
            ]
    });
*/
	
	 /*ColumnChartStore1 = Ext.create('Ext.data.JsonStore', {
        storeId: 'ColumnChartStore1',
		autoLoad: true,
            storeId: 'ColumnChartStore1',
            proxy: {
                type: 'ajax',
                url: '/Json/ColumnChartStore.json',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            fields: [
                {
                    name: 'season'
                },
                {
                    name: 'total'
                }
            ]
    });
	*/
	
Ext.define('Borsuko.view.ui.totals', {
    extend: 'Ext.panel.Panel',

    id: 'totals',

    initComponent: function() {
        var me = this;
        me.items = [
            {
                xtype: 'form',
                autoRender: true,
                autoShow: true,
                frame: true,
                height: 750,
                id: 'tabs',
                itemId: 'tabs',
                maintainFlex: true,
                bodyPadding: '',
                animCollapse: false,
                collapseFirst: false,
                collapsed: false,
                collapsible: true,
                frameHeader: false,
                title: 'Інформація про об`єкт',
                titleCollapse: true,
                pollForChanges: true,
                paramsAsHash: true,
                standardSubmit: true,
                trackResetOnLoad: true,
                items: [
                    {
                        xtype: 'container',
                        height: 220,
                        layout: {
                            type: 'column'
                        },
                        items: [
                            {
                                xtype: 'container',
                                border: 0,
                                id: 'Container1',
                                padding: 10,
                                width: 338,
                                items: [
                                    {
                                        xtype: 'textfield',
                                        id: 'nomer',
                                        width: 200,
                                        toFrontOnShow: false,
										readOnly: true,
                                        fieldLabel: 'Номер Об`єкту',
                                        preventMark: true
                                    },
                                    {
                                        xtype: 'datefield',
										format : "d/m/Y",
                                        id: 'date',
										readOnly: true,
                                        width: 200,
                                        name: 'date',
                                        fieldLabel: 'Дата Об`єкту'
                                    },
                                    {
                                        xtype: 'textfield',
                                        id: 'nazva',
										readOnly: true,
                                        width: 300,
                                        fieldLabel: 'Назва Об`єкту',
                                        emptyText: 'Назва'
                                    },
									 {
                                        xtype: 'textfield',
                                        id: 'adresa',
										readOnly: true,
                                        width: 300,
                                        fieldLabel: 'Адреса Об`єкту'
                                    },
									{
                                        xtype: 'textfield',
                                        id: 'Variant',
										readOnly: true,
                                        width: 300,
                                        fieldLabel: 'Варіант'
                                    }
                                ]
                            },
							
							
							{
                                xtype: 'chart',
                                height: 190,
								id: "PieChart",
                                width: 190,
                                shadow: true,
                                animate: true,
								legend: "{position: 'bottom'}",
                                store: 'StoreForPie',
                                //theme: 'Blue',
                                series: [
                                    {
                                        type: 'pie',
										field: 'Propositia',
                                        highlight: {
										  segment: {
											margin: 10
										  }
										},                                 
										label: {
                                            field: 'type',
                                            display: 'rotate',
                                            contrast: true,
                                            font: '11px Arial'
                                        },
                                        //showInLegend: true,
                                       tips: {
									  trackMouse: true,
									  width: 180,
									  height: 28,
									  
									  renderer: function(storeItem, item) {
										var total = 0;
										StoreForPie.each(function(rec) {
											total += rec.get('Propositia');
										});
										this.setTitle(storeItem.get('type') + ' на : ' + storeItem.get('Propositia')  + ' грн');
									  }
									},
                                                //title: 'pieChart',
                                                //donut: 10,
                                                style: {
												colors:['#F8869D','#25CDF2',
											 '#FFAA3C','#DEFE39',
											 '#AB63F6'] //eSprit 80s
                                                }
                                            }
                                        ]
                                    },
									
									
									
                            {
                                xtype: 'chart',
                                height: 230,
                                id: 'columnChart',
                                width: 230,
                                animate: true,
                                insetPadding: 20,
                                store: 'ColumnChartStore1',
								//data: _comboData,
                                series: [
                                    {
                                        type: 'column',
										gutter: 80,
										stacked: true,
                                        highlight: true,
										//flex: 1,
										animate: true,
										shadow: true,
                                        tips: {
                                            trackMouse: true,
                                            width: 180,
                                            height: 28,
                                            renderer: function(storeItem,
                                            item){
                                                this.setTitle(storeItem.get('season') + ': ' + storeItem.get('total') + 'грн');
                  }
                },
                                                xField: '[\'season\']',
                                                yField: [
                                                    'total'
                                                ],
                                                style: 'background:red'
                                            }
                                        ],
                                        axes: [
                                            {
                                                //type: 'Category',
												type: 'Numeric',
                                                fields: [
                                                    'season'
                                                ],
                                                position: 'bottom',
												grid: true,
                                                title: ''
                                            },
                                            {
                                                type: 'Numeric',
                                                fields: [
                                                    'total'
                                                ],
                                                position: 'left',
												grid: true,
                                                title: 'гроші'
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'container',
                                        id: 'Container3',
                                        padding: 10,
                                        width: 338,
                                        stateful: false,
                                        focusOnToFront: false,
                                        items: [
                                            {
                                                xtype: 'textfield',
                                                id: 'Suma',
                                                width: 150,
                                                fieldLabel: 'Сума',
												readOnly: true,
                                                labelWidth: 75,
                                                emptyText: 'Сума'
                                            },
                                            {
                                                xtype: 'textfield',
                                                id: 'Propozycija',
                                                width: 150,
                                                fieldLabel: 'Пропзиція',
												readOnly: true,
                                                labelWidth: 75,
                                                emptyText: 'Пропозиція'
                                            },
                                            {
                                                xtype: 'textfield',
                                                id: 'Dohid',
                                                width: 150,
                                                fieldLabel: 'Дохід',
												readOnly: true,
                                                labelWidth: 75,
                                                emptyText: 'Дохід'
                                            },
                                            {
                                                xtype: 'textfield',
                                                id: 'Moment_Dollar',
                                                width: 150,
                                                name: 'Moment_Dollar',
												readOnly: true,
                                                fieldLabel: 'Курс $',
                                                labelWidth: 75
                                            },
                                            {
                                                xtype: 'textfield',
                                                id: 'Moment_Euro',
                                                width: 150,
                                                name: 'Moment_Euro',
												readOnly: true,
                                                fieldLabel: 'Курс €',
                                                labelWidth: 75
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                xtype: 'gridpanel',
                                height: 500,
                                id: GridName,
                                bodyBorder: true,
                                frameHeader: false,
                                title: 'Обрані товари',
                                //forceFit: true,
                                store: 'TotalObjectStore1',
                                columnLines: true,
								listeners: {
								itemclick: function() {
									Ext.getCmp('del').setDisabled(false)
									//sendUpdateRequest();
									
								}
							},
                                plugins: [
                                   editor
                                ],
                                columns: [
                                    {
                                        xtype: 'gridcolumn',
										width: 15,
                                        hidden: true,
                                        dataIndex: 'zamovleniaID',
                                        text: '№'
                                    },
                                    {
                                        xtype: 'gridcolumn',
										width: 15,
                                        autoRender: true,
                                        layout: {
                                            type: 'fit'
                                        },
                                        dataIndex: 'type',
										summaryType: 'count',
										summaryRenderer: function(value, summaryData, dataIndex) {
											return "к-сть: " + value;
										},	
                                        text: 'Тип'
                                    },
                                    /*{
                                        xtype: 'gridcolumn',
                                        hidden: true,
                                        dataIndex: 'CategoryName',
                                        text: 'Категорія'

                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        hidden: true,
                                        dataIndex: 'SubCategoryName',
                                        text: 'Субкатегорія'
                                        
                                    },*/
                                    {
                                        xtype: 'gridcolumn',
										width: 15,
                                        dataIndex: 'Model',
                                        text: 'Модель',
                                       editor: new fm.TextField({allowBlank: false}),
									     field: {
                                           xtype: 'textfield'
                                        }
                                    },
                                    {
                                        xtype: 'gridcolumn',
										width: 15,
                                        dataIndex: 'Description',
                                        text: 'Опис Товару',
										editor: new fm.TextField({allowBlank: false}),
                                        field: {
                                           xtype: 'textfield'
                                        }
                                    },
                                    {
                                        xtype: 'gridcolumn',
										width: 15,
                                        hidden: true,
                                        dataIndex: 'Vendor',
                                        text: 'Виробник',
										editor: new fm.TextField({allowBlank: false}),
                                        field: {
                                            xtype: 'textfield'
                                        }
                                    },
                                    {
                                        xtype: 'gridcolumn',
										width: 15,
                                        dataIndex: 'Count',
                                        text: 'К-сть',
										summaryType: "sum", 
										summaryRenderer: function(value, summaryData, dataIndex) {
											return value;
										},	
                                        field: {
                                            xtype: 'numberfield'
                                        }
                                    },
                                    {
                                        xtype: 'gridcolumn',
										width: 15,
                                        dataIndex: 'OdVymir',
                                        text: 'Од.Виміру',
										//editor: new fm.TextField({allowBlank: false}),
                                         field: {
                                            xtype: 'combobox',
											editable: false,
                                            displayField: 'OdVymiru',
                                            queryMode: 'local',
                                            store: 'store_OdVymiru',
                                            valueField: 'OdVymiru'
                                        }
                                    },
                                   /*{
                                        xtype: 'gridcolumn',
                                        dataIndex: 'Time',
                                        text: 'Час монт. 1',
										editor: new fm.TextField({allowBlank: false}),
										field: {
                                            xtype: 'numberfield'
                                        },
										renderer : function(v){ return v + ' хв'; }
                                        
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        dataIndex: 'TotalTime',
                                        text: 'Заг.Час',
										summaryType: "sum", 
										
										summaryRenderer: function(value, summaryData, dataIndex) {
											return "разом " + value + " хв.";
										},	
										 renderer: function(v, params, record) 	{return record.data.Count * record.data.Time + ' хв';	}
                                    },*/
                                    {
                                        xtype: 'gridcolumn',
										width: 15,
                                        dataIndex: 'Price',
                                        text: 'Ціна в вал.',
										editor: new fm.TextField({allowBlank: false}),
                                        field: {
                                            xtype: 'textfield'
                                        },
										renderer: function(v, params, record) 	{ 
										switch(record.data.Valiuta)
										{
										case 'dollar':
										  var ItemValiuta = '<span style="color:green;">'+v+' </span>';
										  break;
										case 'grivna':
										  var ItemValiuta = '<span style="color:blue;"> '+v+'  </span>';
										  break;
										case 'euro':
										  var ItemValiuta = '<span style="color:orange;"> '+v+' </span>';
										  break;
										default:
										  var ItemValiuta = '<span style="color:red;"> '+v+' Невизначено</span>';
										}

										return ItemValiuta;
										}
                                    },
                                    {
                                        xtype: 'gridcolumn',
										width: 15,
                                        dataIndex: 'Valiuta',
										hidden: true,
										renderer: valiuta,
                                        text: 'Валюта',
                                         field: {
											xtype: 'combobox',
											editable: false,
											displayField: 'name',
											store: 'ValiutaStore',
											queryMode: 'local',
											valueField: 'abbr'
										}
                                    },
									
									
										
																			
                                    {
                                        xtype: 'gridcolumn',
										width: 15,
                                        dataIndex: 'PriceGrn',
                                        text: 'Ціна в грн',
										summaryType: 'PriceGrn',
										
										renderer: function(v, params, record) 	{ 
										if (record.data.Valiuta	 == 'dollar') { 
										var strgrivna = record.data.Price * record.data.Moment_Dollar 
										};
										if(record.data.Valiuta	 == 'grivna') { 
										var strgrivna = record.data.Price * strGrivna 
										};
										if(record.data.Valiuta	 == 'euro') { var strgrivna = record.data.Price * record.data.Moment_Euro};
										//return '<span style="color:green;">'strgrivna.toFixed(2) + ' грн'+'%</span>';	
										return '<span style="color:blue;">'+strgrivna.toFixed(2) + ' грн'+'</span>';
										//console.log(record.data.Moment_Dollar);
										}
                                    },
                                    {
                                        xtype: 'gridcolumn',
										width: 15,
                                        dataIndex: 'FinalPrice',
                                        text: 'Сума',
										summaryType: "sum", 
										summaryRenderer: function(value, summaryData, dataIndex) {
										return value.toFixed(2) + ' грн';
										},
										
										/*renderer: function(v, params, record) 	{ 
										var pPrice = record.data.Price;
										var pCount = record.data.Count;
										var pDollar = record.data.Moment_Dollar;
										var pEuro = record.data.Moment_Euro;
										var pNacinka = record.data.Nacinka;
										var pPriceCount = pPrice * pCount;
										
										if (record.data.Valiuta	 == 'dollar') { var strFinalGrivna = (pCount * pPrice) * pDollar};
										if(record.data.Valiuta	 == 'grivna') { var strFinalGrivna = (pCount * pPrice) * strGrivna };
										if(record.data.Valiuta	 == 'euro') { var strFinalGrivna = (pCount * pPrice) * pEuro};
										return '<span style="color:blue;"> '+ strFinalGrivna.toFixed(2) + ' грн </span>';
										}*/
										
										renderer: function(v, params, record) 	{ 
										return '<span style="color:blue;"> '+ v.toFixed(2) + ' грн </span>';
										}
										
										
                                    },
                                    {
                                        xtype: 'gridcolumn',
										width: 15,
                                        dataIndex: 'Nacinka',
                                        text: '% Націнка',
										renderer: pctChange,
										editor: new fm.TextField({allowBlank: false}),
                                        field: {
                                            xtype: 'textfield'
                                        }
                                    },
                                    {
                                        xtype: 'gridcolumn',
										width: 15,
                                        dataIndex: 'PriceFor1',
                                        text: 'Ціна за 1 з нац.',
                                      	renderer: function(v, params, record){ 
		var pPrice = record.data.Price;
		var pCount = record.data.Count;
		var pDollar = record.data.Moment_Dollar;
		var pEuro = record.data.Moment_Euro;
		var pNacinka = record.data.Nacinka;
		var pPriceCount = pPrice * pCount;
		
		
		//if (record.data.Valiuta	 == 'dollar') { var strPriceFor1 = ((((record.data.Price)*record.data.Nacinka)/100)+(record.data.Price)).toFixed(2) * record.data.Moment_Dollar };
		if (record.data.Valiuta	 == 'dollar') { var strPriceFor1 = ((((pPrice * pDollar)*pNacinka)/100)+(pPrice * pDollar)).toFixed(2) };
		if(record.data.Valiuta	 == 'grivna') { var strPriceFor1 = ((((record.data.Price* strGrivna)*record.data.Nacinka)/100)+(record.data.Price* strGrivna)).toFixed(2)};
		if(record.data.Valiuta	 == 'euro') { var strPriceFor1 = ((((pPrice * pEuro)*pNacinka)/100)+(pPrice * pEuro)).toFixed(2) };
		return '<span style="color:blue;"> '+ strPriceFor1 + ' грн </span>';
		
		
		}
                                    },
                                    {
                                        xtype: 'gridcolumn',
										width: 15,
                                        hidden: true,
                                        dataIndex: 'dollar',
                                        text: 'Доллар'
                                    },
                                    {
                                        xtype: 'gridcolumn',
										width: 15,
                                        hidden: true,
                                        dataIndex: 'euro',
                                        text: 'Євро'
                                    },
                                    {
                                        xtype: 'gridcolumn',
										width: 15,
                                        dataIndex: 'Propozycija',
										//summaryType: 'Propozycija',
                                        text: 'Пропозиція',
										summaryType: "sum" ,
										summaryRenderer: function(value, summaryData, dataIndex) {
										return value.toFixed(2) + " грн.";
										},
											
										renderer: function(v, params, record){ 
										var pPrice = record.data.Price;
										var pCount = record.data.Count;
										var pDollar = record.data.Moment_Dollar;
										var pEuro = record.data.Moment_Euro;
										var pNacinka = record.data.Nacinka;
										var pPriceCount = pPrice * pCount;
										if (record.data.Valiuta	 == 'dollar') { var strProposicija = pCount * ((((pPrice * pDollar).toFixed(2)*pNacinka)/100)+(pPrice * pDollar)) };
										if(record.data.Valiuta	 == 'grivna') { var strProposicija = pCount * ((((record.data.Price* strGrivna).toFixed(2)*record.data.Nacinka)/100)+(record.data.Price* strGrivna))};
										if(record.data.Valiuta	 == 'euro')   { var strProposicija = pCount * ((((pPrice * pEuro).toFixed(2)*pNacinka)/100)+(pPrice * pEuro))};
										return '<span =style="color:blue;"> '+ strProposicija.toFixed(2) + ' грн </span>';
										}
                                    },
                                    {
                                        xtype: 'gridcolumn',
										width: 15,
                                        dataIndex: 'Dohid',
										summaryType: 'sum',
										summaryRenderer: function(value, summaryData, dataIndex) {
										strDohid =  value.toFixed(2);
										return value.toFixed(2) + " грн.";
										},
                                        text: 'Дохід',
										renderer: function(v, params, record){ 
	
		//var pPrice = record.data.Price;
		var pPrice = record.data.Price;
		var pCount = record.data.Count;
		var pDollar = record.data.Moment_Dollar;
		var pEuro = record.data.Moment_Euro;
		var pNacinka = record.data.Nacinka;
		var pPriceCount = pPrice * pCount;
		
		
		if (record.data.Valiuta	 == 'dollar') { var strDohidGrn = (pCount * ((((pPrice * pDollar)*pNacinka)/100)+(pPrice * pDollar)).toFixed(2)) - (pCount * pPrice) * pDollar};
		if(record.data.Valiuta	 == 'grivna') { var strDohidGrn = (pCount * ((((record.data.Price* strGrivna)*record.data.Nacinka)/100)+(record.data.Price* strGrivna)).toFixed(2)) - (pCount * pPrice) * strGrivna };
		if(record.data.Valiuta	 == 'euro') { var strDohidGrn = (pCount * ((((pPrice * pEuro)*pNacinka)/100)+(pPrice * pEuro)).toFixed(2)) - (pCount * pPrice) * pEuro};
		
		if (strDohidGrn.toFixed(2)	< 0) { return '<span style="font-weight: bold"; style="color:red">' + strDohidGrn.toFixed(2) + ' грн </span>';};
		return '<span style="color:blue;"> '+ strDohidGrn.toFixed(2) + ' грн </span>';
		} 
                                    }
                                ],
                                viewConfig: {
                                    width: 2000
                                },
                                dockedItems: [
                                    {
                                        xtype: 'pagingtoolbar',
                                        afterPageText: 'із {0}',
                                        beforePageText: 'Сторінка',
                                        displayInfo: true,
                                        displayMsg: 'Показано {0} - {1} із {2}',
                                        emptyMsg: 'Записи відсутні',
                                        firstText: 'Перша сторінка',
                                        lastText: 'Остання сторінка',
                                        nextText: 'Наступна сторінка',
                                        prependButtons: true,
                                        prevText: 'Попередня сторінка',
                                        refreshText: 'Оновити',
                                        store: 'TotalObjectStore1',
                                        dock: 'bottom'
                                    },
                                    {
                                        xtype: 'toolbar',
                                        dock: 'top',
                                        items: [{
												xtype: 'button',
												iconCls: 'save_columns', 
												tooltip: 'Зберегти параметри колонок',
												handler : function(){
												//var MyGrid = Ext.getCmp(GridName).getView();
												getCount();
													}
											},
											{
												xtype: 'button',
												iconCls: 'Export_Item', 
												tooltip: 'Перерахувати об\'єкт',
												handler : function()
													{
														dialog.show();
														//ReCount();
													}
											},
                                            {
                                                xtype: 'button',
                                                id: 'show',
                                                text: 'Додаткові комплектуючі',
												tooltip: 'Добавити додаткові комплектуючі',
												iconCls: 'add',
												handler : function(){
												var strObjid = hash['objid'];
												window.location = "./AddAditional.php?objid="+strObjid;	
												}
                                            },
                                            {
                                                xtype: 'button',
                                                id: 'del',
												handler : function(){
												sendRemoveRequest();
												},
												iconCls: 'remove',
                                                text: 'Видалити комплектуючі',
												tooltip:  'Видалити комплектуючі'
                                            },
                                            {
                                                xtype: 'button',
                                                id: 'export',
                                                text: 'Для клієнта',
												iconCls: 'member',
												handler : function()
												{
												strUrl = "/php/final.php?objid="+strObjid;
												window.open(strUrl);
												}
												

                                            },
                                            {
                                                xtype: 'button',
                                                id: 'export_r',
                                                text: 'Рахунок-фактура',
												iconCls: 'member',
												handler : function()
												{
												//strUrl = "/php/final.php?objid="+strZamovleniaid;
												strUrl = "/php/rahunok.php?objid="+strObjid;
												window.open(strUrl);
												}
												
                                            },
                                            {
                                                xtype: 'button',
                                                id: 'limit_card',
												iconCls: 'show_all',
                                                style: {
                                                    marginLeft: '200px'
                                                },
                                                text: 'Активне обладнання',
												handler : function()
												{
												strUrl = "/view_active.php?objid="+strObjid;
												window.open(strUrl);
												}
                                            },
                                            {
                                                xtype: 'button',
												iconCls: 'show_active',
                                                id: 'save_as',
                                                text: 'Монтажне обладнання',
												handler : function()
												{
												strUrl = "/view_montazh.php?objid="+strObjid;
												window.open(strUrl);
												}
												
                                            }
                                        ]
                                    }
                                ],
                                selModel: Ext.create('Ext.selection.CheckboxModel', {
                                    allowDeselect: true
                                }),
                                features: [
                                    {
                                        ftype: 'groupingsummary'
                                    }
                                ]
                            }
                        ]
                    }
                ];
        me.callParent(arguments);
    }
});

editor.on('afteredit', function () 
{
sendUpdateRequest();
//Ext.getCmp(GridName).getStore().reload();
var MyGrid = Ext.getCmp(GridName).getView();
MyGrid.getStore().load();

});

var dialog;
		dialog = Ext.create( 'Ext.Window', {
		title: 'Перерахувати',
		//layout:'fit',
		width:510,
		height:300,
		closeAction:'hide',
		plain: true,
		items: [SettingsForm,SettingsForm1],
 				buttons: [				
			
			{text: 'Перерахувати по поточному курсу',
				handler: function(){
				euro = Ext.getCmp("euro").getValue();
				dollar = Ext.getCmp("dollar").getValue();
				ReCount(euro, dollar);
				changeChart()
				dialog.hide();
				}
			},
			{text: 'Перерахувати по новому курсу',
				handler: function(){
				euro = Ext.getCmp("Dialog_Moment_Euro").getValue();
				dollar = Ext.getCmp("Dialog_Moment_Dollar").getValue();
				ReCount(euro, dollar);
				changeChart()
				dialog.hide();
				}
			}
			]
		});
		
		
function sendUpdateRequest(){
	
	        var jsonData = new Array();                  
			for(i=0;i<TotalObjectStore1.getCount();i++) {
            record = TotalObjectStore1.getAt(i);
            jsonData.push(record.data);
        }     
		
		jsonData = Ext.encode(jsonData); 		
		Ext.Ajax.request({
		    url:'./php/total.php?action=saveData', //php function that saves the data
		  	params:{data:jsonData},
            success:function(responce, action) {
				var MyGrid = Ext.getCmp(GridName).getView();
				MyGrid.getStore().load();
			TotalObjectStoreForDestroy = Ext.create('Ext.data.JsonStore', {
			storeId: 'TotalObjectStoreForDestroy',
			autoLoad: true,
			groupField: 'type',
				proxy: {
					type: 'ajax',
					url: '/php/total.php?action=showPropositiaDohid&objid='+strObjid,
					reader: {
						type: 'json',
						root: 'results'
					}
				},
				fields: [
					
					{
						type: 'float',				
						name: 'suma'
					},
					{
						type: 'float',				
						name: 'propozycija'
					},
					{
						type: 'float',				
						name: 'dohid'
					}
				],
				listeners: {
							load: function() {
							
							Ext.getCmp("Propozycija").setValue(TotalObjectStoreForDestroy.data.items[0].data.propozycija);
							Ext.getCmp("Suma").setValue(TotalObjectStoreForDestroy.data.items[0].data.suma);
							Ext.getCmp("Dohid").setValue(TotalObjectStoreForDestroy.data.items[0].data.dohid);
							}
						}
		});
			
			
            },
            failure: function(form, action) {
				Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
                //alert('Oops the delete did not work out too well!');
            }
		});        
	
	changeChart();
    }  
	
	function valiuta(val){ 
		switch(val)
		{
		case 'dollar':
		  var ItemValiuta = '<span style="color:green;"> долари </span>';
		  break;
		case 'grivna':
		  var ItemValiuta = '<span style="color:blue;"> гривні </span>';
		  break;
		case 'euro':
		  var ItemValiuta = '<span style="color:orange;"> євро </span>';
		  break;
		default:
		  var ItemValiuta = '<span style="color:red;"> Невизначено</span>';
		}
	return ItemValiuta;
	}	
	
	function sendRemoveRequest(){ 
		if(TotalObjectStore1.getCount()<1){

			return;
		}
		var jsonData = new Array();       
		var cr = Ext.getCmp(GridName).getSelectionModel().selected;
		var Slenght = Ext.getCmp(GridName).getSelectionModel().selected.length;
		if(Slenght > 0) {
			for(i=0; i< Slenght;i++) {
				strModelId = cr.items[i].data.ModelId
				zamovleniaID = cr.items[i].data.zamovleniaID
					jsonData = Ext.encode(jsonData);
					Ext.Ajax.request({
				   url:'./php/total.php?action=removeRecord', //php function that saves the data
					params:{strModelId:strModelId,
					zamovleniaID:zamovleniaID		
					},
					success:function(responce, action) {
					//Ext.getCmp(GridName).getStore().reload();
					var MyStore = Ext.getCmp(GridName).getStore();
					MyStore.load();
						/*var rowCorection=0
							rowIndex = cr[0];
							TotalObjectStore1.removeAt(rowIndex-rowCorection);
							rowCorection++;*/
					},
					failure: function(form, action) {
						Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
						//alert('Oops the delete did not work out too well!');
					}
				});  
			}
		}		
//}		
		changeChart();
	}  
  	/*
	function sendAddRequest(){		
		//waitMask.show();
		//var cr = grid_1.getSelectionModel().getSelectedCellRange();
		var cr = grid_1.getSelectionModel().getSelectedCell();
		var rowIndex = cr[0];
		Ext.Ajax.request({
		   url:'./php/total.php?action=addRecord', //php function that saves the data		  	
            success:function(responce, action) {
            	var Record = Ext.data.Record.create(TotalObjectStore1.fields.items);            	
				var newRecord = new Record(Ext.decode(responce.responseText));  
                grid_1.stopEditing();
                TotalObjectStore1.insert(rowIndex, newRecord);
                grid_1.startEditing(rowIndex, 1);   
				//waitMask.hide()      	
                //alert('Congrats!  Record added!');
            },
            failure: function(form, action) {
                alert('Oops the delete did not work out too well!');
            }
		});        
    }  
	*/
	
	function changeChart(){
	ColumnChartStore1.destroy();
	StoreForPie.destroy();
	
	ColumnChartStore1 = Ext.create('Ext.data.JsonStore', {
	autoLoad: true,
	autoSync: true,
	storeId: 'ColumnChartStore1',
	proxy: {
		type: 'ajax',
		url: './php/ColumnChart.php?objid='+strObjid,
		reader: {
			type: 'json',
			root: 'data'
		}
	},
	fields: [
                {
                    name: 'season'
                },
                {
                    name: 'total'
                }
            ]
	
});

		StoreForPie = Ext.create('Ext.data.JsonStore', {
        storeId: 'StoreForPie',
		autoLoad: true,
            proxy: {
                type: 'ajax',
                url: '/php/types1.php?objid='+strObjid,
                reader: {
                    type: 'json',
                    root: 'results'
                }
            },
            fields: [
                {name: 'type'},{name: 'Propositia'}
            ]
    });
	Ext.getCmp('PieChart').bindStore(StoreForPie);
	Ext.getCmp('columnChart').bindStore(ColumnChartStore1);

	//Ext.getCmp('PieChart').redraw()
	//columnChart.redraw()
	};

	function ReCount(euro, dollar){
		var nomer = Ext.getCmp("nomer").getValue();
		Ext.Ajax.request(
			{
				url: './php/RecountObject.php',
				params: {
					euro: euro,
					dollar: dollar,
					nomer: nomer
				},
				success: function()
				{
					sendUpdateRequest();
					var MyStore = Ext.getCmp(GridName).getStore();
					MyStore.load();
					
				Ext.MessageBox.alert('Перераховано', 'Об\'єкт перерахований станом на сьогодні!');
				},
				failure: function(response)
				{
					Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
				}
			})
	
	}
	
	function getCount(){
	var jsonObj = { };
	  var MyGrid = Ext.getCmp(GridName).getView();
	  var ColumnSizeArray=new Array(); 
	  var ColumnVisibleArray=new Array(); 
	  var columns = MyGrid.getGridColumns();
	  var columnsLength = MyGrid.getGridColumns().length;
	  var columnsState = MyGrid.getHeaderCt().getGridColumns();
	  for(var i = 0; i < columnsLength; i++){
			ColumnSizeArray[i]=MyGrid.getHeaderAtIndex(i).el.dom.firstChild.scrollWidth;
			jsonObj[ColumnSizeArray[i].id] = ColumnSizeArray[i].value;
			ColumnVisibleArray[i]=columnsState[i].hidden;
	  }	

		var JsonColumnSize = array1dToJson(ColumnSizeArray, 'data', 'size');
		var JsonColumnVisible = array1dToJson(ColumnVisibleArray, 'data', 'hidden');
  
		Ext.Ajax.request(
				{
					url: './php/SaveColumnSize.php',
					params: {
						GridName: GridName,
						JsonColumnSize: JsonColumnSize,
						JsonColumnVisible: JsonColumnVisible
						
					},
					success: function()
					{
					Ext.MessageBox.alert('Виконано', 'Стан колонок успішно збережений');
					},
					failure: function(response)
					{
						Ext.MessageBox.alert('Помилка', 'Неможливо доступитися до бази даних');
					}
				})
		
		/*function array2dToJson(a, p, nl) {
		  var i, j, s = '{"' + p + '":[';
		  nl = nl || '';
		  for (i = 0; i < a.length; ++i) {
			s += nl + array1dToJson(a[i]);
			if (i < a.length - 1) {
			  s += ',';
			}
		  }
		  s += nl + ']}';
		  return s;
		}*/
		
		function array1dToJson(a, p, value) {
		  var i, s = '[';
		  for (i = 0; i < a.length; ++i) {
			if (typeof a[i] == 'string') {
			  s += '"' + a[i] + '"';
			}
			else { // assume number type
			  s += "{\""+value+"\": "+a[i]+"}";
			}
			if (i < a.length - 1) {
			  s += ',';
			}
		  }
		  s += ']';
		  if (p) {
			return '{"' + p + '":' + s + '}';
		  }
		  return s;
		}
}

 ColumnSizeStore = Ext.create('Ext.data.JsonStore', {
	autoLoad: true,
	autoSync: true,
	storeId: 'ColumnSizeStore',
	proxy: {
		type: 'ajax',
		url: './php/SelectColumnSize.php?GridName='+GridName,
		reader: {
			type: 'json',
			root: 'data'
		}
	},
	fields: [
		{
			name: 'size'
		}
	],
	listeners: {
				load: function() {
					
					var StoreLength = ColumnSizeStore.data.length;
					for(var i = 0; i < StoreLength; i++){
					//ColumnSizes[i] = ColumnSizeStore.data.items[i].data.size;
					Ext.getCmp(GridName).columns[i].setWidth(ColumnSizeStore.data.items[i].data.size);
					};
				}
			}
});	

ColumnStateStore = Ext.create('Ext.data.JsonStore', {

	autoLoad: true,
	autoSync: true,
	storeId: 'ColumnStateStore',
	proxy: {
		type: 'ajax',
		url: './php/SelectColumnState.php?GridName='+GridName,
		reader: {
			type: 'json',
			root: 'data'
		}
	},
	fields: [
		{
			name: 'hidden'
		}
	],
	listeners: {
				load: function() {
					var StoreLength1 = ColumnStateStore.data.length;
					for(var i = 0; i < StoreLength1; i++){
					//ColumnSizes[i] = ColumnStateStore.data.items[i].data.hidden;
					Ext.getCmp(GridName).columns[i].setVisible(!(ColumnStateStore.data.items[i].data.hidden));//працює на FF, але не на IE
					};
				}
			}
});

